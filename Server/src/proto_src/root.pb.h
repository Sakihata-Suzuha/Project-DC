// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: root.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_root_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_root_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_root_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_root_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_root_2eproto;
class root;
class rootDefaultTypeInternal;
extern rootDefaultTypeInternal _root_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::root* Arena::CreateMaybeMessage<::root>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum root_AccessType : int {
  root_AccessType_blank = 0,
  root_AccessType_login = 1001,
  root_AccessType_logout = 1002,
  root_AccessType_textMessage = 2001,
  root_AccessType_root_AccessType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  root_AccessType_root_AccessType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool root_AccessType_IsValid(int value);
constexpr root_AccessType root_AccessType_AccessType_MIN = root_AccessType_blank;
constexpr root_AccessType root_AccessType_AccessType_MAX = root_AccessType_textMessage;
constexpr int root_AccessType_AccessType_ARRAYSIZE = root_AccessType_AccessType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* root_AccessType_descriptor();
template<typename T>
inline const std::string& root_AccessType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, root_AccessType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function root_AccessType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    root_AccessType_descriptor(), enum_t_value);
}
inline bool root_AccessType_Parse(
    const std::string& name, root_AccessType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<root_AccessType>(
    root_AccessType_descriptor(), name, value);
}
// ===================================================================

class root :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:root) */ {
 public:
  root();
  virtual ~root();

  root(const root& from);
  root(root&& from) noexcept
    : root() {
    *this = ::std::move(from);
  }

  inline root& operator=(const root& from) {
    CopyFrom(from);
    return *this;
  }
  inline root& operator=(root&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const root& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const root* internal_default_instance() {
    return reinterpret_cast<const root*>(
               &_root_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(root& a, root& b) {
    a.Swap(&b);
  }
  inline void Swap(root* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline root* New() const final {
    return CreateMaybeMessage<root>(nullptr);
  }

  root* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<root>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const root& from);
  void MergeFrom(const root& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(root* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "root";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_root_2eproto);
    return ::descriptor_table_root_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef root_AccessType AccessType;
  static constexpr AccessType blank =
    root_AccessType_blank;
  static constexpr AccessType login =
    root_AccessType_login;
  static constexpr AccessType logout =
    root_AccessType_logout;
  static constexpr AccessType textMessage =
    root_AccessType_textMessage;
  static inline bool AccessType_IsValid(int value) {
    return root_AccessType_IsValid(value);
  }
  static constexpr AccessType AccessType_MIN =
    root_AccessType_AccessType_MIN;
  static constexpr AccessType AccessType_MAX =
    root_AccessType_AccessType_MAX;
  static constexpr int AccessType_ARRAYSIZE =
    root_AccessType_AccessType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccessType_descriptor() {
    return root_AccessType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccessType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccessType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccessType_Name.");
    return root_AccessType_Name(enum_t_value);
  }
  static inline bool AccessType_Parse(const std::string& name,
      AccessType* value) {
    return root_AccessType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .root.AccessType _type = 1;
  void clear__type();
  ::root_AccessType _type() const;
  void set__type(::root_AccessType value);
  private:
  ::root_AccessType _internal__type() const;
  void _internal_set__type(::root_AccessType value);
  public:

  // @@protoc_insertion_point(class_scope:root)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int _type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_root_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// root

// .root.AccessType _type = 1;
inline void root::clear__type() {
  _type_ = 0;
}
inline ::root_AccessType root::_internal__type() const {
  return static_cast< ::root_AccessType >(_type_);
}
inline ::root_AccessType root::_type() const {
  // @@protoc_insertion_point(field_get:root._type)
  return _internal__type();
}
inline void root::_internal_set__type(::root_AccessType value) {
  
  _type_ = value;
}
inline void root::set__type(::root_AccessType value) {
  _internal_set__type(value);
  // @@protoc_insertion_point(field_set:root._type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::root_AccessType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::root_AccessType>() {
  return ::root_AccessType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_root_2eproto
