!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AbstractRegistry	module/easylogging++.h	/^  AbstractRegistry(AbstractRegistry&& sr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
AbstractRegistry	module/easylogging++.h	/^  AbstractRegistry(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
AbstractRegistry	module/easylogging++.h	/^class AbstractRegistry : public base::threading::ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
AllowVerboseIfModuleNotSpecified	module/easylogging++.h	/^  AllowVerboseIfModuleNotSpecified = 2,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
And	module/easylogging++.h	/^static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::bitwise
AppName	module/easylogging++.h	/^  AppName = 1 << 11,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
AsyncDispatchWorker	module/easylogging++.cc	/^AsyncDispatchWorker::AsyncDispatchWorker() {$/;"	f	class:el::base::AsyncDispatchWorker
AsyncDispatchWorker	module/easylogging++.h	/^class AsyncDispatchWorker : public base::IWorker, public base::threading::ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
AsyncLogDispatchCallback	module/easylogging++.h	/^class AsyncLogDispatchCallback : public LogDispatchCallback {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
AsyncLogItem	module/easylogging++.h	/^  explicit AsyncLogItem(const LogMessage& logMessage, const LogDispatchData& data, const base::type::string_t& logLine)$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
AsyncLogItem	module/easylogging++.h	/^class AsyncLogItem {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
AsyncLogQueue	module/easylogging++.h	/^class AsyncLogQueue : public base::threading::ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
AutoSpacing	module/easylogging++.h	/^  AutoSpacing = 8192,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
CCHECK	module/easylogging++.h	4420;"	d
CCHECK	module/easylogging++.h	4444;"	d
CCHECK_BOUNDS	module/easylogging++.h	4428;"	d
CCHECK_BOUNDS	module/easylogging++.h	4454;"	d
CCHECK_EQ	module/easylogging++.h	4422;"	d
CCHECK_EQ	module/easylogging++.h	4448;"	d
CCHECK_GE	module/easylogging++.h	4427;"	d
CCHECK_GE	module/easylogging++.h	4453;"	d
CCHECK_GT	module/easylogging++.h	4425;"	d
CCHECK_GT	module/easylogging++.h	4451;"	d
CCHECK_LE	module/easylogging++.h	4426;"	d
CCHECK_LE	module/easylogging++.h	4452;"	d
CCHECK_LT	module/easylogging++.h	4424;"	d
CCHECK_LT	module/easylogging++.h	4450;"	d
CCHECK_NE	module/easylogging++.h	4423;"	d
CCHECK_NE	module/easylogging++.h	4449;"	d
CCHECK_NOTNULL	module/easylogging++.h	4429;"	d
CCHECK_NOTNULL	module/easylogging++.h	4462;"	d
CCHECK_STRCASEEQ	module/easylogging++.h	4430;"	d
CCHECK_STRCASEEQ	module/easylogging++.h	4467;"	d
CCHECK_STRCASENE	module/easylogging++.h	4431;"	d
CCHECK_STRCASENE	module/easylogging++.h	4469;"	d
CCHECK_STREQ	module/easylogging++.h	4463;"	d
CCHECK_STRNE	module/easylogging++.h	4465;"	d
CDEBUG	module/easylogging++.h	3955;"	d
CDEBUG	module/easylogging++.h	4000;"	d
CDEBUG_AFTER_N	module/easylogging++.h	3976;"	d
CDEBUG_AFTER_N	module/easylogging++.h	4125;"	d
CDEBUG_EVERY_N	module/easylogging++.h	3969;"	d
CDEBUG_EVERY_N	module/easylogging++.h	4082;"	d
CDEBUG_IF	module/easylogging++.h	3962;"	d
CDEBUG_IF	module/easylogging++.h	4039;"	d
CDEBUG_N_TIMES	module/easylogging++.h	3983;"	d
CDEBUG_N_TIMES	module/easylogging++.h	4168;"	d
CERROR	module/easylogging++.h	3957;"	d
CERROR	module/easylogging++.h	4005;"	d
CERROR_AFTER_N	module/easylogging++.h	3977;"	d
CERROR_AFTER_N	module/easylogging++.h	4131;"	d
CERROR_EVERY_N	module/easylogging++.h	3970;"	d
CERROR_EVERY_N	module/easylogging++.h	4088;"	d
CERROR_IF	module/easylogging++.h	3963;"	d
CERROR_IF	module/easylogging++.h	4045;"	d
CERROR_N_TIMES	module/easylogging++.h	3984;"	d
CERROR_N_TIMES	module/easylogging++.h	4174;"	d
CFATAL	module/easylogging++.h	3956;"	d
CFATAL	module/easylogging++.h	4010;"	d
CFATAL_AFTER_N	module/easylogging++.h	3978;"	d
CFATAL_AFTER_N	module/easylogging++.h	4137;"	d
CFATAL_EVERY_N	module/easylogging++.h	3971;"	d
CFATAL_EVERY_N	module/easylogging++.h	4094;"	d
CFATAL_IF	module/easylogging++.h	3964;"	d
CFATAL_IF	module/easylogging++.h	4051;"	d
CFATAL_N_TIMES	module/easylogging++.h	3985;"	d
CFATAL_N_TIMES	module/easylogging++.h	4180;"	d
CHECK	module/easylogging++.h	4432;"	d
CHECK	module/easylogging++.h	4446;"	d
CHECK_BOUNDS	module/easylogging++.h	4440;"	d
CHECK_BOUNDS	module/easylogging++.h	4461;"	d
CHECK_EQ	module/easylogging++.h	4434;"	d
CHECK_EQ	module/easylogging++.h	4455;"	d
CHECK_GE	module/easylogging++.h	4439;"	d
CHECK_GE	module/easylogging++.h	4460;"	d
CHECK_GT	module/easylogging++.h	4437;"	d
CHECK_GT	module/easylogging++.h	4458;"	d
CHECK_LE	module/easylogging++.h	4438;"	d
CHECK_LE	module/easylogging++.h	4459;"	d
CHECK_LT	module/easylogging++.h	4436;"	d
CHECK_LT	module/easylogging++.h	4457;"	d
CHECK_NE	module/easylogging++.h	4435;"	d
CHECK_NE	module/easylogging++.h	4456;"	d
CHECK_NOTNULL	module/easylogging++.h	4441;"	d
CHECK_NOTNULL	module/easylogging++.h	4471;"	d
CHECK_STRCASEEQ	module/easylogging++.h	4442;"	d
CHECK_STRCASEEQ	module/easylogging++.h	4474;"	d
CHECK_STRCASENE	module/easylogging++.h	4443;"	d
CHECK_STRCASENE	module/easylogging++.h	4475;"	d
CHECK_STREQ	module/easylogging++.h	4472;"	d
CHECK_STRNE	module/easylogging++.h	4473;"	d
CINFO	module/easylogging++.h	3953;"	d
CINFO	module/easylogging++.h	3990;"	d
CINFO_AFTER_N	module/easylogging++.h	3974;"	d
CINFO_AFTER_N	module/easylogging++.h	4113;"	d
CINFO_EVERY_N	module/easylogging++.h	3967;"	d
CINFO_EVERY_N	module/easylogging++.h	4070;"	d
CINFO_IF	module/easylogging++.h	3960;"	d
CINFO_IF	module/easylogging++.h	4027;"	d
CINFO_N_TIMES	module/easylogging++.h	3981;"	d
CINFO_N_TIMES	module/easylogging++.h	4156;"	d
CLOG	module/easylogging++.h	4201;"	d
CLOG	module/easylogging++.h	4214;"	d
CLOG_AFTER_N	module/easylogging++.h	4209;"	d
CLOG_AFTER_N	module/easylogging++.h	4227;"	d
CLOG_EVERY_N	module/easylogging++.h	4207;"	d
CLOG_EVERY_N	module/easylogging++.h	4223;"	d
CLOG_IF	module/easylogging++.h	4204;"	d
CLOG_IF	module/easylogging++.h	4218;"	d
CLOG_N_TIMES	module/easylogging++.h	4211;"	d
CLOG_N_TIMES	module/easylogging++.h	4231;"	d
CLOG_VERBOSE	module/easylogging++.h	4202;"	d
CLOG_VERBOSE_IF	module/easylogging++.h	4205;"	d
CPCHECK	module/easylogging++.h	4421;"	d
CPCHECK	module/easylogging++.h	4445;"	d
CPLOG	module/easylogging++.h	4271;"	d
CPLOG	module/easylogging++.h	4279;"	d
CPLOG_IF	module/easylogging++.h	4272;"	d
CPLOG_IF	module/easylogging++.h	4281;"	d
CSYSLOG	module/easylogging++.h	4292;"	d
CSYSLOG	module/easylogging++.h	4313;"	d
CSYSLOG_AFTER_N	module/easylogging++.h	4295;"	d
CSYSLOG_AFTER_N	module/easylogging++.h	4318;"	d
CSYSLOG_EVERY_N	module/easylogging++.h	4294;"	d
CSYSLOG_EVERY_N	module/easylogging++.h	4317;"	d
CSYSLOG_IF	module/easylogging++.h	4293;"	d
CSYSLOG_IF	module/easylogging++.h	4315;"	d
CSYSLOG_N_TIMES	module/easylogging++.h	4296;"	d
CSYSLOG_N_TIMES	module/easylogging++.h	4319;"	d
CTRACE	module/easylogging++.h	3958;"	d
CTRACE	module/easylogging++.h	4015;"	d
CTRACE_AFTER_N	module/easylogging++.h	3979;"	d
CTRACE_AFTER_N	module/easylogging++.h	4143;"	d
CTRACE_EVERY_N	module/easylogging++.h	3972;"	d
CTRACE_EVERY_N	module/easylogging++.h	4100;"	d
CTRACE_IF	module/easylogging++.h	3965;"	d
CTRACE_IF	module/easylogging++.h	4057;"	d
CTRACE_N_TIMES	module/easylogging++.h	3986;"	d
CTRACE_N_TIMES	module/easylogging++.h	4186;"	d
CVERBOSE	module/easylogging++.h	3959;"	d
CVERBOSE	module/easylogging++.h	4020;"	d
CVERBOSE_AFTER_N	module/easylogging++.h	3980;"	d
CVERBOSE_AFTER_N	module/easylogging++.h	4149;"	d
CVERBOSE_EVERY_N	module/easylogging++.h	3973;"	d
CVERBOSE_EVERY_N	module/easylogging++.h	4106;"	d
CVERBOSE_IF	module/easylogging++.h	3966;"	d
CVERBOSE_IF	module/easylogging++.h	4063;"	d
CVERBOSE_N_TIMES	module/easylogging++.h	3987;"	d
CVERBOSE_N_TIMES	module/easylogging++.h	4192;"	d
CVLOG	module/easylogging++.h	4203;"	d
CVLOG	module/easylogging++.h	4216;"	d
CVLOG_AFTER_N	module/easylogging++.h	4210;"	d
CVLOG_AFTER_N	module/easylogging++.h	4229;"	d
CVLOG_EVERY_N	module/easylogging++.h	4208;"	d
CVLOG_EVERY_N	module/easylogging++.h	4225;"	d
CVLOG_IF	module/easylogging++.h	4206;"	d
CVLOG_IF	module/easylogging++.h	4220;"	d
CVLOG_N_TIMES	module/easylogging++.h	4212;"	d
CVLOG_N_TIMES	module/easylogging++.h	4233;"	d
CWARNING	module/easylogging++.h	3954;"	d
CWARNING	module/easylogging++.h	3995;"	d
CWARNING_AFTER_N	module/easylogging++.h	3975;"	d
CWARNING_AFTER_N	module/easylogging++.h	4119;"	d
CWARNING_EVERY_N	module/easylogging++.h	3968;"	d
CWARNING_EVERY_N	module/easylogging++.h	4076;"	d
CWARNING_IF	module/easylogging++.h	3961;"	d
CWARNING_IF	module/easylogging++.h	4033;"	d
CWARNING_N_TIMES	module/easylogging++.h	3982;"	d
CWARNING_N_TIMES	module/easylogging++.h	4162;"	d
Callback	module/easylogging++.h	/^  Callback(void) : m_enabled(true) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Callback
Callback	module/easylogging++.h	/^class Callback : protected base::threading::ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
Checkpoint	module/easylogging++.h	/^    Checkpoint = 1, Complete = 2$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
ColoredTerminalOutput	module/easylogging++.h	/^  ColoredTerminalOutput = 64,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
CommandLineArgs	module/easylogging++.h	/^  CommandLineArgs(int argc, char** argv) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
CommandLineArgs	module/easylogging++.h	/^  CommandLineArgs(int argc, const char** argv) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
CommandLineArgs	module/easylogging++.h	/^  CommandLineArgs(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
CommandLineArgs	module/easylogging++.h	/^class CommandLineArgs {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
Complete	module/easylogging++.h	/^    Checkpoint = 1, Complete = 2$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
Configuration	module/easylogging++.cc	/^Configuration::Configuration(Level level, ConfigurationType configurationType, const std::string& value) :$/;"	f	class:el::Configuration
Configuration	module/easylogging++.cc	/^Configuration::Configuration(const Configuration& c) :$/;"	f	class:el::Configuration
Configuration	module/easylogging++.h	/^class Configuration : public Loggable {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit
ConfigurationStringToTypeItem	module/easylogging++.cc	/^struct ConfigurationStringToTypeItem {$/;"	s	namespace:el	file:
ConfigurationType	module/easylogging++.h	/^enum class ConfigurationType : base::type::EnumType {$/;"	c	namespace:el::el
ConfigurationTypeHelper	module/easylogging++.h	/^class ConfigurationTypeHelper : base::StaticClass {$/;"	c	class:el::el::ConfigurationType
Configurations	module/easylogging++.cc	/^Configurations::Configurations(const std::string& configurationFile, bool useDefaultsForRemaining,$/;"	f	class:el::Configurations
Configurations	module/easylogging++.cc	/^Configurations::Configurations(void) :$/;"	f	class:el::Configurations
Configurations	module/easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predicate> {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit
CrashHandler	module/easylogging++.cc	/^CrashHandler::CrashHandler(bool useDefault) {$/;"	f	class:el::base::debug::CrashHandler
CrashHandler	module/easylogging++.h	/^  explicit CrashHandler(const Handler& cHandler) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::CrashHandler
CrashHandler	module/easylogging++.h	/^class CrashHandler : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug
CreateLoggerAutomatically	module/easylogging++.h	/^  CreateLoggerAutomatically = 4096,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
CustomFormatSpecifier	module/easylogging++.h	/^  CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resolver) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::CustomFormatSpecifier
CustomFormatSpecifier	module/easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit
DCCHECK	module/easylogging++.h	4476;"	d
DCCHECK	module/easylogging++.h	4500;"	d
DCCHECK_BOUNDS	module/easylogging++.h	4483;"	d
DCCHECK_BOUNDS	module/easylogging++.h	4507;"	d
DCCHECK_EQ	module/easylogging++.h	4477;"	d
DCCHECK_EQ	module/easylogging++.h	4501;"	d
DCCHECK_GE	module/easylogging++.h	4482;"	d
DCCHECK_GE	module/easylogging++.h	4506;"	d
DCCHECK_GT	module/easylogging++.h	4480;"	d
DCCHECK_GT	module/easylogging++.h	4504;"	d
DCCHECK_LE	module/easylogging++.h	4481;"	d
DCCHECK_LE	module/easylogging++.h	4505;"	d
DCCHECK_LT	module/easylogging++.h	4479;"	d
DCCHECK_LT	module/easylogging++.h	4503;"	d
DCCHECK_NE	module/easylogging++.h	4478;"	d
DCCHECK_NE	module/easylogging++.h	4502;"	d
DCCHECK_NOTNULL	module/easylogging++.h	4484;"	d
DCCHECK_NOTNULL	module/easylogging++.h	4508;"	d
DCCHECK_STRCASEEQ	module/easylogging++.h	4485;"	d
DCCHECK_STRCASEEQ	module/easylogging++.h	4511;"	d
DCCHECK_STRCASENE	module/easylogging++.h	4486;"	d
DCCHECK_STRCASENE	module/easylogging++.h	4512;"	d
DCCHECK_STREQ	module/easylogging++.h	4509;"	d
DCCHECK_STRNE	module/easylogging++.h	4510;"	d
DCHECK	module/easylogging++.h	4488;"	d
DCHECK	module/easylogging++.h	4514;"	d
DCHECK_BOUNDS	module/easylogging++.h	4521;"	d
DCHECK_BOUNDS_	module/easylogging++.h	4495;"	d
DCHECK_EQ	module/easylogging++.h	4489;"	d
DCHECK_EQ	module/easylogging++.h	4515;"	d
DCHECK_GE	module/easylogging++.h	4494;"	d
DCHECK_GE	module/easylogging++.h	4520;"	d
DCHECK_GT	module/easylogging++.h	4492;"	d
DCHECK_GT	module/easylogging++.h	4518;"	d
DCHECK_LE	module/easylogging++.h	4493;"	d
DCHECK_LE	module/easylogging++.h	4519;"	d
DCHECK_LT	module/easylogging++.h	4491;"	d
DCHECK_LT	module/easylogging++.h	4517;"	d
DCHECK_NE	module/easylogging++.h	4490;"	d
DCHECK_NE	module/easylogging++.h	4516;"	d
DCHECK_NOTNULL	module/easylogging++.h	4496;"	d
DCHECK_NOTNULL	module/easylogging++.h	4522;"	d
DCHECK_STRCASEEQ	module/easylogging++.h	4497;"	d
DCHECK_STRCASEEQ	module/easylogging++.h	4525;"	d
DCHECK_STRCASENE	module/easylogging++.h	4498;"	d
DCHECK_STRCASENE	module/easylogging++.h	4526;"	d
DCHECK_STREQ	module/easylogging++.h	4523;"	d
DCHECK_STRNE	module/easylogging++.h	4524;"	d
DCLOG	module/easylogging++.h	4365;"	d
DCLOG	module/easylogging++.h	4376;"	d
DCLOG_AFTER_N	module/easylogging++.h	4371;"	d
DCLOG_AFTER_N	module/easylogging++.h	4385;"	d
DCLOG_EVERY_N	module/easylogging++.h	4369;"	d
DCLOG_EVERY_N	module/easylogging++.h	4383;"	d
DCLOG_IF	module/easylogging++.h	4367;"	d
DCLOG_IF	module/easylogging++.h	4380;"	d
DCLOG_N_TIMES	module/easylogging++.h	4373;"	d
DCLOG_N_TIMES	module/easylogging++.h	4387;"	d
DCLOG_VERBOSE	module/easylogging++.h	4377;"	d
DCPCHECK	module/easylogging++.h	4487;"	d
DCPCHECK	module/easylogging++.h	4513;"	d
DCPLOG	module/easylogging++.h	4275;"	d
DCPLOG	module/easylogging++.h	4283;"	d
DCPLOG_IF	module/easylogging++.h	4276;"	d
DCPLOG_IF	module/easylogging++.h	4285;"	d
DCSYSLOG	module/easylogging++.h	4302;"	d
DCSYSLOG	module/easylogging++.h	4325;"	d
DCSYSLOG_AFTER_N	module/easylogging++.h	4305;"	d
DCSYSLOG_AFTER_N	module/easylogging++.h	4330;"	d
DCSYSLOG_EVERY_N	module/easylogging++.h	4304;"	d
DCSYSLOG_EVERY_N	module/easylogging++.h	4328;"	d
DCSYSLOG_IF	module/easylogging++.h	4303;"	d
DCSYSLOG_IF	module/easylogging++.h	4326;"	d
DCSYSLOG_N_TIMES	module/easylogging++.h	4306;"	d
DCSYSLOG_N_TIMES	module/easylogging++.h	4332;"	d
DCVLOG	module/easylogging++.h	4366;"	d
DCVLOG	module/easylogging++.h	4378;"	d
DCVLOG_AFTER_N	module/easylogging++.h	4372;"	d
DCVLOG_AFTER_N	module/easylogging++.h	4386;"	d
DCVLOG_EVERY_N	module/easylogging++.h	4370;"	d
DCVLOG_EVERY_N	module/easylogging++.h	4384;"	d
DCVLOG_IF	module/easylogging++.h	4368;"	d
DCVLOG_IF	module/easylogging++.h	4381;"	d
DCVLOG_N_TIMES	module/easylogging++.h	4374;"	d
DCVLOG_N_TIMES	module/easylogging++.h	4388;"	d
DEBUG	module/easylogging++.h	3947;"	d
DLOG	module/easylogging++.h	4394;"	d
DLOG	module/easylogging++.h	4405;"	d
DLOG_AFTER_N	module/easylogging++.h	4400;"	d
DLOG_AFTER_N	module/easylogging++.h	4413;"	d
DLOG_EVERY_N	module/easylogging++.h	4398;"	d
DLOG_EVERY_N	module/easylogging++.h	4411;"	d
DLOG_IF	module/easylogging++.h	4396;"	d
DLOG_IF	module/easylogging++.h	4408;"	d
DLOG_N_TIMES	module/easylogging++.h	4402;"	d
DLOG_N_TIMES	module/easylogging++.h	4415;"	d
DPCHECK	module/easylogging++.h	4499;"	d
DPCHECK	module/easylogging++.h	4527;"	d
DPLOG	module/easylogging++.h	4277;"	d
DPLOG	module/easylogging++.h	4289;"	d
DPLOG_IF	module/easylogging++.h	4278;"	d
DPLOG_IF	module/easylogging++.h	4290;"	d
DSYSLOG	module/easylogging++.h	4307;"	d
DSYSLOG	module/easylogging++.h	4334;"	d
DSYSLOG_AFTER_N	module/easylogging++.h	4310;"	d
DSYSLOG_AFTER_N	module/easylogging++.h	4337;"	d
DSYSLOG_EVERY_N	module/easylogging++.h	4309;"	d
DSYSLOG_EVERY_N	module/easylogging++.h	4336;"	d
DSYSLOG_IF	module/easylogging++.h	4308;"	d
DSYSLOG_IF	module/easylogging++.h	4335;"	d
DSYSLOG_N_TIMES	module/easylogging++.h	4311;"	d
DSYSLOG_N_TIMES	module/easylogging++.h	4338;"	d
DVLOG	module/easylogging++.h	4395;"	d
DVLOG	module/easylogging++.h	4406;"	d
DVLOG_AFTER_N	module/easylogging++.h	4401;"	d
DVLOG_AFTER_N	module/easylogging++.h	4414;"	d
DVLOG_EVERY_N	module/easylogging++.h	4399;"	d
DVLOG_EVERY_N	module/easylogging++.h	4412;"	d
DVLOG_IF	module/easylogging++.h	4397;"	d
DVLOG_IF	module/easylogging++.h	4409;"	d
DVLOG_N_TIMES	module/easylogging++.h	4403;"	d
DVLOG_N_TIMES	module/easylogging++.h	4416;"	d
DataType	module/easylogging++.h	/^  enum class DataType : base::type::EnumType {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData
DateTime	module/easylogging++.h	/^  DateTime = 1 << 1,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
DateTime	module/easylogging++.h	/^class DateTime : base::StaticClass {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
Day	module/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit
Debug	module/easylogging++.h	/^  Debug = 4,$/;"	m	class:el::Level
DefaultLogBuilder	module/easylogging++.h	/^class DefaultLogBuilder : public LogBuilder {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
DefaultLogDispatchCallback	module/easylogging++.h	/^class DefaultLogDispatchCallback : public LogDispatchCallback {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
DefaultPerformanceTrackingCallback	module/easylogging++.h	/^class DefaultPerformanceTrackingCallback : public PerformanceTrackingCallback {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base
DisableApplicationAbortOnFatalLog	module/easylogging++.h	/^  DisableApplicationAbortOnFatalLog = 8,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
DisablePerformanceTrackingCheckpointComparison	module/easylogging++.h	/^  DisablePerformanceTrackingCheckpointComparison = 256,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
DisableVModules	module/easylogging++.h	/^  DisableVModules = 512,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
DisableVModulesExtensions	module/easylogging++.h	/^  DisableVModulesExtensions = 1024,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
DispatchAction	module/easylogging++.h	/^enum class DispatchAction : base::type::EnumType {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
EASYLOGGINGPP_H	module/easylogging++.h	18;"	d
ELPP	module/easylogging++.h	2723;"	d
ELPP_ASSERT	module/easylogging++.h	155;"	d
ELPP_ASSERT	module/easylogging++.h	162;"	d
ELPP_ASSERT	module/easylogging++.h	170;"	d
ELPP_ASYNC_LOGGING	module/easylogging++.h	271;"	d
ELPP_ASYNC_LOGGING	module/easylogging++.h	273;"	d
ELPP_CLANG_SUPPORTS_THREAD	module/easylogging++.h	60;"	d
ELPP_COMPILER_CLANG	module/easylogging++.h	52;"	d
ELPP_COMPILER_CLANG	module/easylogging++.h	54;"	d
ELPP_COMPILER_GCC	module/easylogging++.h	24;"	d
ELPP_COMPILER_GCC	module/easylogging++.h	26;"	d
ELPP_COMPILER_INTEL	module/easylogging++.h	75;"	d
ELPP_COMPILER_INTEL	module/easylogging++.h	77;"	d
ELPP_COMPILER_MSVC	module/easylogging++.h	38;"	d
ELPP_COMPILER_MSVC	module/easylogging++.h	40;"	d
ELPP_COUNTER	module/easylogging++.h	3938;"	d
ELPP_COUNTER	module/easylogging++.h	3941;"	d
ELPP_COUNTER_POS	module/easylogging++.h	3939;"	d
ELPP_COUNTER_POS	module/easylogging++.h	3943;"	d
ELPP_COUT	module/easylogging++.h	505;"	d
ELPP_COUT	module/easylogging++.h	510;"	d
ELPP_COUT_LINE	module/easylogging++.h	534;"	d
ELPP_COUT_LINE	module/easylogging++.h	536;"	d
ELPP_CRASH_HANDLER_INIT	module/easylogging++.h	4534;"	d
ELPP_CRT_DBG_WARNINGS	module/easylogging++.h	42;"	d
ELPP_CURR_FILE_LOGGER_ID	module/easylogging++.h	4249;"	d
ELPP_CURR_FILE_LOGGER_ID	module/easylogging++.h	4251;"	d
ELPP_CXX0X	module/easylogging++.h	33;"	d
ELPP_CXX0X	module/easylogging++.h	45;"	d
ELPP_CXX11	module/easylogging++.h	21;"	d
ELPP_CXX11	module/easylogging++.h	47;"	d
ELPP_CYGWIN	module/easylogging++.h	70;"	d
ELPP_CYGWIN	module/easylogging++.h	72;"	d
ELPP_DEBUG_LOG	module/easylogging++.h	308;"	d
ELPP_DEBUG_LOG	module/easylogging++.h	310;"	d
ELPP_DEFAULT_LOGGING_FLAGS	module/easylogging++.cc	2058;"	d	file:
ELPP_ERROR_LOG	module/easylogging++.h	323;"	d
ELPP_ERROR_LOG	module/easylogging++.h	325;"	d
ELPP_EXPORT	module/easylogging++.h	229;"	d
ELPP_EXPORT	module/easylogging++.h	231;"	d
ELPP_EXPORT	module/easylogging++.h	234;"	d
ELPP_FATAL_LOG	module/easylogging++.h	328;"	d
ELPP_FATAL_LOG	module/easylogging++.h	330;"	d
ELPP_FINAL	module/easylogging++.h	/^  virtual void updateDateFormat(std::size_t index, base::type::string_t& currFormat) ELPP_FINAL;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
ELPP_FINAL	module/easylogging++.h	/^  virtual void updateFormatSpec(void) ELPP_FINAL;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
ELPP_FINAL	module/easylogging++.h	264;"	d
ELPP_FINAL	module/easylogging++.h	266;"	d
ELPP_FINAL	module/easylogging++.h	268;"	d
ELPP_FUNC	module/easylogging++.h	281;"	d
ELPP_FUNC	module/easylogging++.h	283;"	d
ELPP_FUNC	module/easylogging++.h	285;"	d
ELPP_FUNC	module/easylogging++.h	287;"	d
ELPP_FUNC	module/easylogging++.h	289;"	d
ELPP_FUNC	module/easylogging++.h	292;"	d
ELPP_FUNC	module/easylogging++.h	294;"	d
ELPP_GCC_VERSION	module/easylogging++.h	29;"	d
ELPP_INFO_LOG	module/easylogging++.h	313;"	d
ELPP_INFO_LOG	module/easylogging++.h	315;"	d
ELPP_INITIALIZE_SYSLOG	module/easylogging++.h	3648;"	d
ELPP_INIT_EASYLOGGINGPP	module/easylogging++.h	4535;"	d
ELPP_INTERNAL_DEBUGGING_ENDL	module/easylogging++.h	147;"	d
ELPP_INTERNAL_DEBUGGING_MSG	module/easylogging++.h	150;"	d
ELPP_INTERNAL_DEBUGGING_OUT_ERROR	module/easylogging++.h	144;"	d
ELPP_INTERNAL_DEBUGGING_OUT_INFO	module/easylogging++.h	141;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	module/easylogging++.h	173;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	module/easylogging++.h	177;"	d
ELPP_INTERNAL_ERROR	module/easylogging++.h	182;"	d
ELPP_INTERNAL_ERROR	module/easylogging++.h	191;"	d
ELPP_INTERNAL_INFO	module/easylogging++.h	190;"	d
ELPP_INTERNAL_INFO	module/easylogging++.h	198;"	d
ELPP_INTERNAL_INFO	module/easylogging++.h	204;"	d
ELPP_INTERNAL_INFO	module/easylogging++.h	205;"	d
ELPP_INTERNAL_INFO_LEVEL	module/easylogging++.h	195;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	module/easylogging++.h	2920;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	module/easylogging++.h	3146;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	module/easylogging++.h	2915;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	module/easylogging++.h	3145;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	module/easylogging++.h	2900;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	module/easylogging++.h	3142;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	module/easylogging++.h	2910;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	module/easylogging++.h	3144;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	module/easylogging++.h	2905;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	module/easylogging++.h	3143;"	d
ELPP_LITERAL	module/easylogging++.h	503;"	d
ELPP_LITERAL	module/easylogging++.h	507;"	d
ELPP_LOGGING_ENABLED	module/easylogging++.h	303;"	d
ELPP_LOGGING_ENABLED	module/easylogging++.h	305;"	d
ELPP_LOG_PERMS	module/easylogging++.h	225;"	d
ELPP_MINGW	module/easylogging++.h	65;"	d
ELPP_MINGW	module/easylogging++.h	67;"	d
ELPP_MIN_UNIT	module/easylogging++.h	3908;"	d
ELPP_MIN_UNIT	module/easylogging++.h	3910;"	d
ELPP_OS_AIX	module/easylogging++.h	108;"	d
ELPP_OS_AIX	module/easylogging++.h	110;"	d
ELPP_OS_ANDROID	module/easylogging++.h	129;"	d
ELPP_OS_ANDROID	module/easylogging++.h	131;"	d
ELPP_OS_EMSCRIPTEN	module/easylogging++.h	118;"	d
ELPP_OS_EMSCRIPTEN	module/easylogging++.h	120;"	d
ELPP_OS_FREEBSD	module/easylogging++.h	100;"	d
ELPP_OS_FREEBSD	module/easylogging++.h	98;"	d
ELPP_OS_LINUX	module/easylogging++.h	136;"	d
ELPP_OS_LINUX	module/easylogging++.h	138;"	d
ELPP_OS_LINUX	module/easylogging++.h	88;"	d
ELPP_OS_LINUX	module/easylogging++.h	90;"	d
ELPP_OS_MAC	module/easylogging++.h	93;"	d
ELPP_OS_MAC	module/easylogging++.h	95;"	d
ELPP_OS_NETBSD	module/easylogging++.h	113;"	d
ELPP_OS_NETBSD	module/easylogging++.h	115;"	d
ELPP_OS_SOLARIS	module/easylogging++.h	103;"	d
ELPP_OS_SOLARIS	module/easylogging++.h	105;"	d
ELPP_OS_UNIX	module/easylogging++.h	124;"	d
ELPP_OS_UNIX	module/easylogging++.h	126;"	d
ELPP_OS_UNIX	module/easylogging++.h	135;"	d
ELPP_OS_UNIX	module/easylogging++.h	137;"	d
ELPP_OS_WINDOWS	module/easylogging++.h	82;"	d
ELPP_OS_WINDOWS	module/easylogging++.h	84;"	d
ELPP_SIMPLE_LOG	module/easylogging++.h	2865;"	d
ELPP_SIMPLE_LOG	module/easylogging++.h	3141;"	d
ELPP_STACKTRACE	module/easylogging++.h	209;"	d
ELPP_STACKTRACE	module/easylogging++.h	216;"	d
ELPP_STACKTRACE	module/easylogging++.h	219;"	d
ELPP_STRLEN	module/easylogging++.h	504;"	d
ELPP_STRLEN	module/easylogging++.h	508;"	d
ELPP_THREADING_ENABLED	module/easylogging++.h	276;"	d
ELPP_THREADING_ENABLED	module/easylogging++.h	278;"	d
ELPP_THREAD_SAFE	resource_init/logInit.cpp	8;"	d	file:
ELPP_TRACE	module/easylogging++.h	4255;"	d
ELPP_TRACE	module/easylogging++.h	4256;"	d
ELPP_TRACE_LOG	module/easylogging++.h	333;"	d
ELPP_TRACE_LOG	module/easylogging++.h	335;"	d
ELPP_UNUSED	module/easylogging++.h	222;"	d
ELPP_USE_DEF_CRASH_HANDLER	module/easylogging++.h	4530;"	d
ELPP_USE_STD_THREADING	module/easylogging++.h	254;"	d
ELPP_USE_STD_THREADING	module/easylogging++.h	259;"	d
ELPP_USE_STD_THREADING	module/easylogging++.h	261;"	d
ELPP_VARIADIC_FUNC_MSVC	module/easylogging++.h	3381;"	d
ELPP_VARIADIC_FUNC_MSVC_RUN	module/easylogging++.h	3382;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	module/easylogging++.h	297;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	module/easylogging++.h	299;"	d
ELPP_VERBOSE_LOG	module/easylogging++.h	338;"	d
ELPP_VERBOSE_LOG	module/easylogging++.h	340;"	d
ELPP_WARNING_LOG	module/easylogging++.h	318;"	d
ELPP_WARNING_LOG	module/easylogging++.h	320;"	d
ELPP_WRITE_LOG	module/easylogging++.h	3393;"	d
ELPP_WRITE_LOG_AFTER_N	module/easylogging++.h	3400;"	d
ELPP_WRITE_LOG_EVERY_N	module/easylogging++.h	3397;"	d
ELPP_WRITE_LOG_IF	module/easylogging++.h	3395;"	d
ELPP_WRITE_LOG_N_TIMES	module/easylogging++.h	3403;"	d
ELPP_WX_ENABLED	module/easylogging++.h	3130;"	d
ELPP_WX_HASH_MAP_ENABLED	module/easylogging++.h	3131;"	d
ELPP_WX_PTR_ENABLED	module/easylogging++.h	3129;"	d
ERROR	module/easylogging++.h	3948;"	d
Enabled	module/easylogging++.h	/^  Enabled = 1,$/;"	m	class:el::el::ConfigurationType
EnumType	module/easylogging++.h	/^typedef unsigned int EnumType;$/;"	t	namespace:el::base::type
Error	module/easylogging++.h	/^  Error = 16,$/;"	m	class:el::Level
FATAL	module/easylogging++.h	3949;"	d
Fatal	module/easylogging++.h	/^  Fatal = 8,$/;"	m	class:el::Level
File	module/easylogging++.h	/^  File = 1 << 3,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
File	module/easylogging++.h	/^class File : base::StaticClass {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
FileBase	module/easylogging++.h	/^  FileBase = 1 << 14,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
FileStreamPtr	module/easylogging++.h	/^typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	namespace:el::el::ConfigurationType::base::TimestampUnit::base
Filename	module/easylogging++.h	/^  Filename = 16,$/;"	m	class:el::el::ConfigurationType
FixedTimeFormat	module/easylogging++.h	/^  FixedTimeFormat = 16384,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
Format	module/easylogging++.h	/^  Format = 8,$/;"	m	class:el::el::ConfigurationType
FormatFlags	module/easylogging++.h	/^enum class FormatFlags : base::type::EnumType {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit
FormatSpecifierValueResolver	module/easylogging++.h	/^typedef std::function<std::string(const LogMessage*)> FormatSpecifierValueResolver;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit
Function	module/easylogging++.h	/^  Function = 1 << 6,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
Global	module/easylogging++.h	/^  Global = 1,$/;"	m	class:el::Level
Handler	module/easylogging++.h	/^  typedef void (*Handler)(int);$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::CrashHandler
Helpers	module/easylogging++.h	/^class Helpers : base::StaticClass {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData
HierarchicalLogging	module/easylogging++.h	/^  HierarchicalLogging = 2048,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
HitCounter	module/easylogging++.h	/^  HitCounter(const HitCounter& hitCounter) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
HitCounter	module/easylogging++.h	/^  HitCounter(const char* filename, base::type::LineNumber lineNumber) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
HitCounter	module/easylogging++.h	/^  HitCounter(void) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
HitCounter	module/easylogging++.h	/^class HitCounter {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
Host	module/easylogging++.h	/^  Host = 1 << 8,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
Hour	module/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit
INFO	module/easylogging++.h	3945;"	d
INITIALIZE_EASYLOGGINGPP	module/easylogging++.h	4544;"	d
INITIALIZE_NULL_EASYLOGGINGPP	module/easylogging++.h	4549;"	d
IWorker	module/easylogging++.h	/^class IWorker {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
IgnoreSigInt	module/easylogging++.h	/^  IgnoreSigInt = 32768,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
ImmediateFlush	module/easylogging++.h	/^  ImmediateFlush = 16,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
Info	module/easylogging++.h	/^  Info = 128,$/;"	m	class:el::Level
IterableContainer	module/easylogging++.h	/^  IterableContainer(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableContainer
IterableContainer	module/easylogging++.h	/^class IterableContainer {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds
IterablePriorityQueue	module/easylogging++.h	/^  IterablePriorityQueue(std::priority_queue<T, Container, Comparator> queue_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterablePriorityQueue
IterablePriorityQueue	module/easylogging++.h	/^class IterablePriorityQueue : public IterableContainer<T, Container>,$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds
IterableQueue	module/easylogging++.h	/^  IterableQueue(std::queue<T, Container> queue_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableQueue
IterableQueue	module/easylogging++.h	/^class IterableQueue : public IterableContainer<T, Container>, public std::queue<T, Container> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds
IterableStack	module/easylogging++.h	/^  IterableStack(std::stack<T, Container> stack_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableStack
IterableStack	module/easylogging++.h	/^class IterableStack : public IterableContainer<T, Container>, public std::stack<T, Container> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds
LOG	module/easylogging++.h	4239;"	d
LOG	module/easylogging++.h	4258;"	d
LOGGER_LEVEL_WRITERS	module/easylogging++.h	3328;"	d
LOGGER_LEVEL_WRITERS	module/easylogging++.h	3377;"	d
LOGGER_LEVEL_WRITERS_DISABLED	module/easylogging++.h	3337;"	d
LOGGER_LEVEL_WRITERS_DISABLED	module/easylogging++.h	3378;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	module/easylogging++.h	2276;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	module/easylogging++.h	2294;"	d
LOG_AFTER_N	module/easylogging++.h	4245;"	d
LOG_AFTER_N	module/easylogging++.h	4266;"	d
LOG_EVERY_N	module/easylogging++.h	4243;"	d
LOG_EVERY_N	module/easylogging++.h	4264;"	d
LOG_IF	module/easylogging++.h	4241;"	d
LOG_IF	module/easylogging++.h	4261;"	d
LOG_N_TIMES	module/easylogging++.h	4247;"	d
LOG_N_TIMES	module/easylogging++.h	4268;"	d
Level	module/easylogging++.h	/^  Level = 1 << 13,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
Level	module/easylogging++.h	/^enum class Level : base::type::EnumType {$/;"	c	namespace:el
LevelHelper	module/easylogging++.h	/^class LevelHelper : base::StaticClass {$/;"	c	namespace:el::el
LevelShort	module/easylogging++.h	/^  LevelShort = 1 << 15$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
Line	module/easylogging++.h	/^  Line = 1 << 4,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
LineNumber	module/easylogging++.h	/^typedef unsigned long int LineNumber;$/;"	t	namespace:el::base::type
Location	module/easylogging++.h	/^  Location = 1 << 5,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
LogBuilder	module/easylogging++.h	/^  LogBuilder() : m_termSupportsColor(base::utils::OS::termSupportsColor()) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogBuilder
LogBuilder	module/easylogging++.h	/^class LogBuilder : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LogBuilderPtr	module/easylogging++.h	/^typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LogDetailedCrashReason	module/easylogging++.h	/^  LogDetailedCrashReason = 4,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
LogDispatchCallback	module/easylogging++.h	/^class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LogDispatchCallbackPtr	module/easylogging++.h	/^typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	namespace:el::base::type
LogDispatchData	module/easylogging++.h	/^  LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchData
LogDispatchData	module/easylogging++.h	/^class LogDispatchData {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LogDispatcher	module/easylogging++.h	/^  LogDispatcher(bool proceed, LogMessage* logMessage, base::DispatchAction dispatchAction) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::LogDispatcher
LogDispatcher	module/easylogging++.h	/^class LogDispatcher : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
LogFlushThreshold	module/easylogging++.h	/^  LogFlushThreshold = 256,$/;"	m	class:el::el::ConfigurationType
LogFormat	module/easylogging++.cc	/^LogFormat::LogFormat(Level level, const base::type::string_t& format)$/;"	f	class:el::base::LogFormat
LogFormat	module/easylogging++.cc	/^LogFormat::LogFormat(LogFormat&& logFormat) {$/;"	f	class:el::base::LogFormat
LogFormat	module/easylogging++.cc	/^LogFormat::LogFormat(const LogFormat& logFormat):$/;"	f	class:el::base::LogFormat
LogFormat	module/easylogging++.cc	/^LogFormat::LogFormat(void) :$/;"	f	class:el::base::LogFormat
LogFormat	module/easylogging++.h	/^class LogFormat : public Loggable {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LogMessage	module/easylogging++.h	/^  LogMessage = 1 << 9,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
LogMessage	module/easylogging++.h	/^  LogMessage(Level level, const std::string& file, base::type::LineNumber line, const std::string& func,$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
LogMessage	module/easylogging++.h	/^class LogMessage {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LogStreamsReferenceMap	module/easylogging++.h	/^typedef std::unordered_map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	namespace:el::el::ConfigurationType::base::TimestampUnit::base
Loggable	module/easylogging++.h	/^class Loggable {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit
Logger	module/easylogging++.cc	/^Logger::Logger(const Logger& logger) {$/;"	f	class:el::Logger
Logger	module/easylogging++.cc	/^Logger::Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Logger
Logger	module/easylogging++.cc	/^Logger::Logger(const std::string& id, const Configurations& configurations,$/;"	f	class:el::Logger
Logger	module/easylogging++.h	/^class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LoggerId	module/easylogging++.h	/^  LoggerId = 1 << 2,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
LoggerRegistrationCallback	module/easylogging++.h	/^class LoggerRegistrationCallback : public Callback<Logger> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
LoggerRegistrationCallbackPtr	module/easylogging++.h	/^typedef std::shared_ptr<LoggerRegistrationCallback> LoggerRegistrationCallbackPtr;$/;"	t	namespace:el::base::type
Loggers	module/easylogging++.h	/^class Loggers : base::StaticClass {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData
LoggingFlag	module/easylogging++.h	/^enum class LoggingFlag : base::type::EnumType {$/;"	c	class:el::el::ConfigurationType
MAKE_CONTAINERELPP_FRIENDLY	module/easylogging++.h	3109;"	d
MAKE_LOGGABLE	module/easylogging++.h	3628;"	d
MaxLogFileSize	module/easylogging++.h	/^  MaxLogFileSize = 128,$/;"	m	class:el::el::ConfigurationType
MessageBuilder	module/easylogging++.h	/^  MessageBuilder(void) : m_logger(nullptr), m_containerLogSeperator(ELPP_LITERAL("")) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
MessageBuilder	module/easylogging++.h	/^class MessageBuilder {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
Microsecond	module/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit
Millisecond	module/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit
MillisecondsWidth	module/easylogging++.h	/^  MillisecondsWidth = SubsecondPrecision,$/;"	m	class:el::el::ConfigurationType
MillisecondsWidth	module/easylogging++.h	/^typedef SubsecondPrecision MillisecondsWidth;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
Minute	module/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit
MultiLoggerSupport	module/easylogging++.h	/^  MultiLoggerSupport = 128,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
Mutex	module/easylogging++.h	/^  Mutex(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::Mutex
Mutex	module/easylogging++.h	/^class Mutex : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal
Mutex	module/easylogging++.h	/^typedef base::threading::internal::Mutex Mutex;$/;"	t	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading
NewLineForContainer	module/easylogging++.h	/^  NewLineForContainer = 1,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
NoCopy	module/easylogging++.h	/^  NoCopy(void) {}$/;"	f	class:el::base::NoCopy
NoCopy	module/easylogging++.h	/^class NoCopy {$/;"	c	namespace:el::base
None	module/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::DispatchAction
NormalLog	module/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::DispatchAction
Not	module/easylogging++.h	/^static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::bitwise
NullWriter	module/easylogging++.h	/^  NullWriter(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::NullWriter
NullWriter	module/easylogging++.h	/^class NullWriter : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
OS	module/easylogging++.h	/^class OS : base::StaticClass {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
OStreamMani	module/easylogging++.h	/^  inline MessageBuilder& operator<<(std::ostream& (*OStreamMani)(std::ostream&)) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
Or	module/easylogging++.h	/^static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::bitwise
PCHECK	module/easylogging++.h	4433;"	d
PCHECK	module/easylogging++.h	4447;"	d
PERFORMANCE_CHECKPOINT	module/easylogging++.h	3934;"	d
PERFORMANCE_CHECKPOINT	module/easylogging++.h	3936;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	module/easylogging++.h	3935;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	module/easylogging++.h	3937;"	d
PErrorWriter	module/easylogging++.h	/^  PErrorWriter(Level level, const char* file, base::type::LineNumber line,$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Writer::PErrorWriter
PErrorWriter	module/easylogging++.h	/^class PErrorWriter : public base::Writer {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Writer
PLOG	module/easylogging++.h	4273;"	d
PLOG	module/easylogging++.h	4287;"	d
PLOG_IF	module/easylogging++.h	4274;"	d
PLOG_IF	module/easylogging++.h	4288;"	d
Parser	module/easylogging++.h	/^  class Parser : base::StaticClass {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
PerformanceTracker	module/easylogging++.cc	/^PerformanceTracker::PerformanceTracker(const std::string& blockName,$/;"	f	class:el::base::PerformanceTracker
PerformanceTracker	module/easylogging++.h	/^  PerformanceTracker(const PerformanceTracker& t) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
PerformanceTracker	module/easylogging++.h	/^class PerformanceTracker : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base
PerformanceTrackerPtr	module/easylogging++.h	/^typedef std::unique_ptr<el::base::PerformanceTracker> PerformanceTrackerPtr;$/;"	t	namespace:el::base::type
PerformanceTracking	module/easylogging++.h	/^  PerformanceTracking = 64,$/;"	m	class:el::el::ConfigurationType
PerformanceTrackingCallback	module/easylogging++.h	/^class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
PerformanceTrackingCallbackPtr	module/easylogging++.h	/^typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	namespace:el::base::type
PerformanceTrackingData	module/easylogging++.h	/^  explicit PerformanceTrackingData(DataType dataType) : m_performanceTracker(nullptr),$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
PerformanceTrackingData	module/easylogging++.h	/^class PerformanceTrackingData {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
PreRollOutCallback	module/easylogging++.h	/^typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	class:el::el::ConfigurationType
Predicate	module/easylogging++.cc	/^Configuration::Predicate::Predicate(Level level, ConfigurationType configurationType) :$/;"	f	class:el::Configuration::Predicate
Predicate	module/easylogging++.h	/^    Predicate(const char* filename, base::type::LineNumber lineNumber)$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter::Predicate
Predicate	module/easylogging++.h	/^  class Predicate {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
Predicate	module/easylogging++.h	/^  class Predicate {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
RegisteredHitCounters	module/easylogging++.h	/^class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCounter::Predicate> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
RegisteredLoggers	module/easylogging++.cc	/^RegisteredLoggers::RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	class:el::base::RegisteredLoggers
RegisteredLoggers	module/easylogging++.h	/^class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
Registry	module/easylogging++.h	/^  Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
Registry	module/easylogging++.h	/^  Registry(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
Registry	module/easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::unordered_map<T_Key, T_Ptr*>> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
RegistryWithPred	module/easylogging++.h	/^  RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
RegistryWithPred	module/easylogging++.h	/^  RegistryWithPred(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
RegistryWithPred	module/easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
SHARE_EASYLOGGINGPP	module/easylogging++.h	4556;"	d
START_EASYLOGGINGPP	module/easylogging++.h	4565;"	d
STRCAT	module/easylogging++.h	239;"	d
STRCAT	module/easylogging++.h	244;"	d
STRCAT	module/easylogging++.h	249;"	d
STRCPY	module/easylogging++.h	240;"	d
STRCPY	module/easylogging++.h	245;"	d
STRCPY	module/easylogging++.h	250;"	d
STRERROR	module/easylogging++.h	238;"	d
STRERROR	module/easylogging++.h	243;"	d
STRERROR	module/easylogging++.h	248;"	d
STRTOK	module/easylogging++.h	237;"	d
STRTOK	module/easylogging++.h	242;"	d
STRTOK	module/easylogging++.h	247;"	d
SYSLOG	module/easylogging++.h	4297;"	d
SYSLOG	module/easylogging++.h	4320;"	d
SYSLOG_AFTER_N	module/easylogging++.h	4300;"	d
SYSLOG_AFTER_N	module/easylogging++.h	4323;"	d
SYSLOG_EVERY_N	module/easylogging++.h	4299;"	d
SYSLOG_EVERY_N	module/easylogging++.h	4322;"	d
SYSLOG_IF	module/easylogging++.h	4298;"	d
SYSLOG_IF	module/easylogging++.h	4321;"	d
SYSLOG_N_TIMES	module/easylogging++.h	4301;"	d
SYSLOG_N_TIMES	module/easylogging++.h	4324;"	d
ScopedAddFlag	module/easylogging++.h	/^    ScopedAddFlag(LoggingFlag flag) : m_flag(flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers::ScopedAddFlag
ScopedAddFlag	module/easylogging++.h	/^  class ScopedAddFlag {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
ScopedLock	module/easylogging++.h	/^  explicit ScopedLock(M& mutex) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
ScopedLock	module/easylogging++.h	/^class ScopedLock : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal
ScopedLock	module/easylogging++.h	/^typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading
ScopedRemoveFlag	module/easylogging++.h	/^    ScopedRemoveFlag(LoggingFlag flag) : m_flag(flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers::ScopedRemoveFlag
ScopedRemoveFlag	module/easylogging++.h	/^  class ScopedRemoveFlag {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
Second	module/easylogging++.h	/^  Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit
StackTrace	module/easylogging++.h	/^  StackTrace(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace
StackTrace	module/easylogging++.h	/^class StackTrace : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug
StackTraceEntry	module/easylogging++.cc	/^StackTrace::StackTraceEntry::StackTraceEntry(std::size_t index, const std::string& loc, const std::string& demang,$/;"	f	class:el::base::debug::StackTrace::StackTraceEntry
StackTraceEntry	module/easylogging++.h	/^    StackTraceEntry(std::size_t index, const std::string& loc) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace::StackTraceEntry
StackTraceEntry	module/easylogging++.h	/^  class StackTraceEntry {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace
StaticClass	module/easylogging++.h	/^class StaticClass {$/;"	c	namespace:el::base
Storage	module/easylogging++.cc	/^Storage::Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker) :$/;"	f	class:el::base::Storage
Storage	module/easylogging++.h	/^class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
StoragePointer	module/easylogging++.h	/^typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	namespace:el::base::type
Str	module/easylogging++.h	/^class Str : base::StaticClass {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
StrictLogFileSizeCheck	module/easylogging++.h	/^  StrictLogFileSizeCheck = 32,$/;"	m	class:el::el::ConfigurationType::LoggingFlag
StringToLevelItem	module/easylogging++.cc	/^struct StringToLevelItem {$/;"	s	namespace:el	file:
SubsecondPrecision	module/easylogging++.h	/^  SubsecondPrecision = 32,$/;"	m	class:el::el::ConfigurationType
SubsecondPrecision	module/easylogging++.h	/^  SubsecondPrecision(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::SubsecondPrecision
SubsecondPrecision	module/easylogging++.h	/^  explicit SubsecondPrecision(int width) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::SubsecondPrecision
SubsecondPrecision	module/easylogging++.h	/^class SubsecondPrecision {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
SysLog	module/easylogging++.h	/^  None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::DispatchAction
SysLogInitializer	module/easylogging++.h	/^  SysLogInitializer(const char* processIdent, int options = 0, int facility = 0) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::SysLogInitializer
SysLogInitializer	module/easylogging++.h	/^class SysLogInitializer {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData
TIMED_BLOCK	module/easylogging++.h	3903;"	d
TIMED_BLOCK	module/easylogging++.h	3924;"	d
TIMED_FUNC	module/easylogging++.h	3906;"	d
TIMED_FUNC	module/easylogging++.h	3933;"	d
TIMED_FUNC_IF	module/easylogging++.h	3907;"	d
TIMED_FUNC_IF	module/easylogging++.h	3932;"	d
TIMED_SCOPE	module/easylogging++.h	3904;"	d
TIMED_SCOPE	module/easylogging++.h	3923;"	d
TIMED_SCOPE_IF	module/easylogging++.h	3905;"	d
TIMED_SCOPE_IF	module/easylogging++.h	3921;"	d
TRACE	module/easylogging++.h	3950;"	d
ThreadId	module/easylogging++.h	/^  ThreadId = 1 << 12,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
ThreadSafe	module/easylogging++.h	/^  ThreadSafe(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::ThreadSafe
ThreadSafe	module/easylogging++.h	/^class ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading
TimestampUnit	module/easylogging++.h	/^enum class TimestampUnit : base::type::EnumType {$/;"	c	namespace:el::el::ConfigurationType::base
ToFile	module/easylogging++.h	/^  ToFile = 2,$/;"	m	class:el::el::ConfigurationType
ToStandardOutput	module/easylogging++.h	/^  ToStandardOutput = 4,$/;"	m	class:el::el::ConfigurationType
Trace	module/easylogging++.h	/^  Trace = 2,$/;"	m	class:el::Level
TypedConfigurations	module/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(Configurations* configurations,$/;"	f	class:el::base::TypedConfigurations
TypedConfigurations	module/easylogging++.cc	/^TypedConfigurations::TypedConfigurations(const TypedConfigurations& other) {$/;"	f	class:el::base::TypedConfigurations
TypedConfigurations	module/easylogging++.h	/^class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base
Unknown	module/easylogging++.h	/^  Unknown = 1010$/;"	m	class:el::Level
Unknown	module/easylogging++.h	/^  Unknown = 1010$/;"	m	class:el::el::ConfigurationType
User	module/easylogging++.h	/^  User = 1 << 7,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
Utils	module/easylogging++.h	/^class Utils {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
VERBOSE	module/easylogging++.h	3951;"	d
VLOG	module/easylogging++.h	4240;"	d
VLOG	module/easylogging++.h	4259;"	d
VLOG_AFTER_N	module/easylogging++.h	4246;"	d
VLOG_AFTER_N	module/easylogging++.h	4267;"	d
VLOG_EVERY_N	module/easylogging++.h	4244;"	d
VLOG_EVERY_N	module/easylogging++.h	4265;"	d
VLOG_IF	module/easylogging++.h	4242;"	d
VLOG_IF	module/easylogging++.h	4262;"	d
VLOG_IS_ON	module/easylogging++.h	3900;"	d
VLOG_IS_ON	module/easylogging++.h	3902;"	d
VLOG_N_TIMES	module/easylogging++.h	4248;"	d
VLOG_N_TIMES	module/easylogging++.h	4269;"	d
VRegistry	module/easylogging++.cc	/^VRegistry::VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(level), m_pFlags(pFlags) {$/;"	f	class:el::base::VRegistry
VRegistry	module/easylogging++.h	/^class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
Verbose	module/easylogging++.h	/^  Verbose = 64,$/;"	m	class:el::Level
VerboseLevel	module/easylogging++.h	/^  VerboseLevel = 1 << 10,$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
VerboseLevel	module/easylogging++.h	/^typedef unsigned short VerboseLevel;$/;"	t	namespace:el::base::type
VersionInfo	module/easylogging++.h	/^class VersionInfo : base::StaticClass {$/;"	c	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData
WARNING	module/easylogging++.h	3946;"	d
Warning	module/easylogging++.h	/^  Warning = 32,$/;"	m	class:el::Level
Writer	module/easylogging++.h	/^  Writer(Level level, const char* file, base::type::LineNumber line,$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Writer
Writer	module/easylogging++.h	/^  Writer(LogMessage* msg, base::DispatchAction dispatchAction = base::DispatchAction::NormalLog) :$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Writer
Writer	module/easylogging++.h	/^class Writer : base::NoCopy {$/;"	c	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
_BUFFER_SIZE_	def.h	20;"	d
_EPOLL_CREATE_ERROR_	def.h	12;"	d
_EPOLL_CTL_ERROR_	def.h	13;"	d
_EPOLL_EVENT_SIZE_	def.h	19;"	d
_EPOLL_WAIT_ERROR_	def.h	14;"	d
_LOG_CONFIG_PATH_	def.h	22;"	d
_LOG_FDOUTPUT_FILE_	def.h	23;"	d
_PROCESS_SETSID_ERROR_	def.h	5;"	d
_SOCKET_BIND_ERROR_	def.h	10;"	d
_SOCKET_LISTEN_ERROR_	def.h	11;"	d
_SOCKET_LISTEN_SIZE_	def.h	18;"	d
_SOCKET_REGISTER_ERROR_	def.h	9;"	d
_UNKNOWN_EVENT_	def.h	1;"	d
__StartDaemon	process_manager/__StartDaemon.cpp	/^int __StartDaemon(daemonCallback callback)$/;"	f
abort	module/easylogging++.cc	/^static void abort(int status, const std::string& reason) {$/;"	f	namespace:el::base::utils
addFlag	module/easylogging++.h	/^  inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
addFlag	module/easylogging++.h	/^  inline void addFlag(base::FormatFlags flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
addFlag	module/easylogging++.h	/^  static inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
addFlag	module/easylogging++.h	/^static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
addToBuff	module/easylogging++.cc	/^char* Str::addToBuff(const char* str, char* buf, const char* bufLim) {$/;"	f	class:el::base::utils::Str
allowed	module/easylogging++.cc	/^bool VRegistry::allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	class:el::base::VRegistry
asyncLogQueue	module/easylogging++.h	/^  inline base::AsyncLogQueue* asyncLogQueue(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
base	module/easylogging++.cc	/^namespace base {$/;"	n	namespace:el	file:
base	module/easylogging++.h	/^namespace base {$/;"	n	class:el::el::ConfigurationType
base	module/easylogging++.h	/^namespace base {$/;"	n	class:el::el::ConfigurationType::base::TimestampUnit
base	module/easylogging++.h	/^namespace base {$/;"	n	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData
base	module/easylogging++.h	/^namespace base {$/;"	n	namespace:el
base	module/easylogging++.h	/^namespace base {$/;"	n	namespace:el::el::ConfigurationType::base::TimestampUnit::base
begin	module/easylogging++.h	/^  iterator begin(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableContainer
bitwise	module/easylogging++.h	/^namespace bitwise {$/;"	n	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
blockName	module/easylogging++.h	/^inline const std::string* PerformanceTrackingData::blockName() const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::PerformanceTrackingData
brief	module/easylogging++.h	/^  const char* brief;$/;"	m	struct:el::el::ConfigurationType::base::consts::__anon2
build	module/easylogging++.cc	/^base::type::string_t DefaultLogBuilder::build(const LogMessage* logMessage, bool appendNewLine) const {$/;"	f	class:el::base::DefaultLogBuilder
build	module/easylogging++.cc	/^void TypedConfigurations::build(Configurations* configurations) {$/;"	f	class:el::base::TypedConfigurations
buildBaseFilename	module/easylogging++.cc	/^void File::buildBaseFilename(const std::string& fullPath, char buff[], std::size_t limit, const char* separator) {$/;"	f	class:el::base::utils::File
buildStrippedFilename	module/easylogging++.cc	/^void File::buildStrippedFilename(const char* filename, char buff[], std::size_t limit) {$/;"	f	class:el::base::utils::File
buildTimeInfo	module/easylogging++.cc	/^struct ::tm* DateTime::buildTimeInfo(struct timeval* currTime, struct ::tm* timeInfo) {$/;"	f	class:el::base::utils::DateTime
cStringCaseEq	module/easylogging++.cc	/^bool Str::cStringCaseEq(const char* s1, const char* s2) {$/;"	f	class:el::base::utils::Str
cStringEq	module/easylogging++.cc	/^bool Str::cStringEq(const char* s1, const char* s2) {$/;"	f	class:el::base::utils::Str
callback	module/easylogging++.h	/^  static T* callback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Utils
castFromInt	module/easylogging++.h	/^  static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	class:el::el::ConfigurationType::ConfigurationTypeHelper
castFromInt	module/easylogging++.h	/^  static Level castFromInt(base::type::EnumType l) {$/;"	f	class:el::el::LevelHelper
castToInt	module/easylogging++.h	/^  static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	class:el::el::ConfigurationType::ConfigurationTypeHelper
castToInt	module/easylogging++.h	/^  static base::type::EnumType castToInt(Level level) {$/;"	f	class:el::el::LevelHelper
char_t	module/easylogging++.h	/^typedef wchar_t char_t;$/;"	t	namespace:el::base::type
checkpoint	module/easylogging++.cc	/^void PerformanceTracker::checkpoint(const std::string& id, const char* file, base::type::LineNumber line,$/;"	f	class:el::base::PerformanceTracker
checkpointId	module/easylogging++.h	/^  inline std::string checkpointId(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
clean	module/easylogging++.cc	/^bool AsyncDispatchWorker::clean(void) {$/;"	f	class:el::base::AsyncDispatchWorker
clear	module/easylogging++.h	/^  inline void clear(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
clearBuff	module/easylogging++.cc	/^char* Str::clearBuff(char buff[], std::size_t lim) {$/;"	f	class:el::base::utils::Str
clearModules	module/easylogging++.h	/^  inline void clearModules(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::VRegistry
clearVModules	module/easylogging++.cc	/^void Loggers::clearVModules(void) {$/;"	f	class:el::Loggers
commandLineArgs	module/easylogging++.h	/^  inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
commandLineArgs	module/easylogging++.h	/^  static inline const el::base::utils::CommandLineArgs* commandLineArgs(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
configString	module/easylogging++.cc	/^  const char* configString;$/;"	m	struct:el::ConfigurationStringToTypeItem	file:
configStringToTypeMap	module/easylogging++.cc	/^static struct ConfigurationStringToTypeItem configStringToTypeMap[] = {$/;"	m	namespace:el	typeref:struct:el::ConfigurationStringToTypeItem	file:
configType	module/easylogging++.cc	/^  ConfigurationType configType;$/;"	m	struct:el::ConfigurationStringToTypeItem	file:
configurationFile	module/easylogging++.h	/^  inline const std::string& configurationFile(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
configurationType	module/easylogging++.h	/^  inline ConfigurationType configurationType(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
configurations	module/easylogging++.h	/^  const Configurations* configurations(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
configurations	module/easylogging++.h	/^  inline Configurations* configurations(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
configure	module/easylogging++.cc	/^void Logger::configure(const Configurations& configurations) {$/;"	f	class:el::Logger
configureFromArg	module/easylogging++.cc	/^bool Loggers::configureFromArg(const char* argKey) {$/;"	f	class:el::Loggers
configureFromGlobal	module/easylogging++.cc	/^void Loggers::configureFromGlobal(const char* globalConfigurationFilePath) {$/;"	f	class:el::Loggers
const_iterator	module/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
const_iterator	module/easylogging++.h	/^  typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableContainer
const_iterator	module/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
const_iterator	module/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
construct	module/easylogging++.cc	/^Writer& Writer::construct(Logger* logger, bool needLock) {$/;"	f	class:el::base::Writer
construct	module/easylogging++.cc	/^Writer& Writer::construct(int count, const char* loggerIds, ...) {$/;"	f	class:el::base::Writer
consts	module/easylogging++.cc	/^namespace consts {$/;"	n	namespace:el::base	file:
consts	module/easylogging++.h	/^namespace consts {$/;"	n	namespace:el::el::ConfigurationType::base
contains	module/easylogging++.cc	/^bool Str::contains(const char* str, char c) {$/;"	f	class:el::base::utils::Str
continueRunning	module/easylogging++.h	/^  bool continueRunning(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncDispatchWorker
convertAndAddToBuff	module/easylogging++.cc	/^char* Str::convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool zeroPadded) {$/;"	f	class:el::base::utils::Str
convertFromString	module/easylogging++.cc	/^ConfigurationType ConfigurationTypeHelper::convertFromString(const char* configStr) {$/;"	f	class:el::ConfigurationTypeHelper
convertFromString	module/easylogging++.cc	/^Level LevelHelper::convertFromString(const char* levelStr) {$/;"	f	class:el::LevelHelper
convertTemplateToStdString	module/easylogging++.h	/^  static std::string convertTemplateToStdString(const T& templ) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
convertToColoredOutput	module/easylogging++.cc	/^void LogBuilder::convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	class:el::LogBuilder
convertToString	module/easylogging++.cc	/^const char* ConfigurationTypeHelper::convertToString(ConfigurationType configurationType) {$/;"	f	class:el::ConfigurationTypeHelper
convertToString	module/easylogging++.cc	/^const char* LevelHelper::convertToString(Level level) {$/;"	f	class:el::LevelHelper
core	main.cpp	/^void core(void* data)$/;"	f
crashAbort	module/easylogging++.cc	/^static inline void crashAbort(int sig) {$/;"	f	namespace:el::base::debug
crashAbort	module/easylogging++.cc	/^void Helpers::crashAbort(int sig, const char* sourceFile, unsigned int long line) {$/;"	f	class:el::Helpers
crashReason	module/easylogging++.cc	/^static std::string crashReason(int sig) {$/;"	f	namespace:el::base::debug
createPath	module/easylogging++.cc	/^bool File::createPath(const std::string& path) {$/;"	f	class:el::base::utils::File
currentHost	module/easylogging++.cc	/^std::string OS::currentHost(void) {$/;"	f	class:el::base::utils::OS
currentUser	module/easylogging++.cc	/^std::string OS::currentUser(void) {$/;"	f	class:el::base::utils::OS
customFormatSpecifiers	module/easylogging++.h	/^  const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
customFormatSpecifiersLock	module/easylogging++.h	/^  base::threading::Mutex& customFormatSpecifiersLock() {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
cv	module/easylogging++.h	/^  std::condition_variable cv;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncDispatchWorker
daemonCallback	process_manager/process_manager.h	/^typedef void(*daemonCallback)(void* data);$/;"	t
data	module/easylogging++.h	/^  inline LogDispatchData* data(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
dataType	module/easylogging++.h	/^  inline PerformanceTrackingData::DataType dataType(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
dateTimeFormat	module/easylogging++.h	/^  inline const std::string& dateTimeFormat(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
debug	module/easylogging++.cc	/^namespace debug {$/;"	n	namespace:el::base	file:
debug	module/easylogging++.h	/^namespace debug {$/;"	n	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base
deepCopy	module/easylogging++.h	/^  virtual void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
defaultConfigurations	module/easylogging++.cc	/^const Configurations* Loggers::defaultConfigurations(void) {$/;"	f	class:el::Loggers
defaultConfigurations	module/easylogging++.h	/^  inline Configurations* defaultConfigurations(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
defaultCrashHandler	module/easylogging++.cc	/^static inline void defaultCrashHandler(int sig) {$/;"	f	namespace:el::base::debug
defaultPreRollOutCallback	module/easylogging++.h	/^static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	namespace:el::el::ConfigurationType::base
defaultTypedConfigurations	module/easylogging++.cc	/^base::TypedConfigurations Loggers::defaultTypedConfigurations(void) {$/;"	f	class:el::Loggers
detail	module/easylogging++.h	/^  const char* detail;$/;"	m	struct:el::el::ConfigurationType::base::consts::__anon2
dispatch	module/easylogging++.cc	/^void DefaultLogDispatchCallback::dispatch(base::type::string_t&& logLine) {$/;"	f	class:el::base::DefaultLogDispatchCallback
dispatch	module/easylogging++.cc	/^void LogDispatcher::dispatch(void) {$/;"	f	class:el::base::LogDispatcher
dispatchAction	module/easylogging++.h	/^  inline base::DispatchAction dispatchAction(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchData
el	module/easylogging++.cc	/^namespace el {$/;"	n	file:
el	module/easylogging++.h	/^namespace el {$/;"	n
el	module/easylogging++.h	/^namespace el {$/;"	n	namespace:el
el_getVALength	module/easylogging++.h	3383;"	d
el_resolveVALength	module/easylogging++.h	3392;"	d
elpptime	module/easylogging++.h	462;"	d
elpptime	module/easylogging++.h	466;"	d
elpptime_r	module/easylogging++.h	460;"	d
elpptime_r	module/easylogging++.h	464;"	d
elpptime_s	module/easylogging++.h	461;"	d
elpptime_s	module/easylogging++.h	465;"	d
empty	module/easylogging++.cc	/^bool CommandLineArgs::empty(void) const {$/;"	f	class:el::base::utils::CommandLineArgs
empty	module/easylogging++.h	/^  inline bool empty(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogQueue
emptyQueue	module/easylogging++.cc	/^void AsyncDispatchWorker::emptyQueue(void) {$/;"	f	class:el::base::AsyncDispatchWorker
enabled	module/easylogging++.cc	/^bool TypedConfigurations::enabled(Level level) {$/;"	f	class:el::base::TypedConfigurations
enabled	module/easylogging++.h	/^  inline bool enabled(Level level) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
enabled	module/easylogging++.h	/^  inline bool enabled(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Callback
end	module/easylogging++.h	/^  iterator end(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableContainer
endTime	module/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::endTime() const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::PerformanceTrackingData
endsWith	module/easylogging++.cc	/^bool Str::endsWith(const std::string& str, const std::string& end) {$/;"	f	class:el::base::utils::Str
epollin_task	pthread_manager/epollin_task.cpp	/^int epollin_task(threadArg* arg)$/;"	f
extractPathFromFilename	module/easylogging++.cc	/^std::string File::extractPathFromFilename(const std::string& fullPath, const char* separator) {$/;"	f	class:el::base::utils::File
file	module/easylogging++.h	/^  inline const char* file(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
file	module/easylogging++.h	/^  inline const std::string& file(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
fileHandle	module/easylogging++.cc	/^base::threading::Mutex& LogDispatchCallback::fileHandle(const LogDispatchData* data) {$/;"	f	class:el::LogDispatchCallback
fileStream	module/easylogging++.cc	/^base::type::fstream_t* TypedConfigurations::fileStream(Level level) {$/;"	f	class:el::base::TypedConfigurations
filename	module/easylogging++.cc	/^const std::string& TypedConfigurations::filename(Level level) {$/;"	f	class:el::base::TypedConfigurations
filename	module/easylogging++.h	/^  inline const char* filename(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
firstCheckpoint	module/easylogging++.h	/^  inline bool firstCheckpoint(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
flags	module/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
flags	module/easylogging++.h	/^  inline base::type::EnumType flags(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
flush	module/easylogging++.cc	/^void Logger::flush(Level level, base::type::fstream_t* fs) {$/;"	f	class:el::Logger
flush	module/easylogging++.cc	/^void Logger::flush(void) {$/;"	f	class:el::Logger
flushAll	module/easylogging++.cc	/^void Loggers::flushAll(void) {$/;"	f	class:el::Loggers
flushAll	module/easylogging++.h	/^  inline void flushAll(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
forEachConfigType	module/easylogging++.cc	/^void ConfigurationTypeHelper::forEachConfigType(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::ConfigurationTypeHelper
forEachLevel	module/easylogging++.cc	/^void LevelHelper::forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::LevelHelper
format	module/easylogging++.h	/^  inline const base::type::string_t& format(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
formatSpecifier	module/easylogging++.h	/^  inline const char* formatSpecifier(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::CustomFormatSpecifier
formatTime	module/easylogging++.cc	/^base::type::string_t DateTime::formatTime(unsigned long long time, base::TimestampUnit timestampUnit) {$/;"	f	class:el::base::utils::DateTime
formattedTimeTaken	module/easylogging++.h	/^  inline const base::type::string_t* formattedTimeTaken() const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
front	module/easylogging++.h	/^  inline AsyncLogItem front(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogQueue
fstream_t	module/easylogging++.h	/^typedef std::wfstream fstream_t;$/;"	t	namespace:el::base::type
func	module/easylogging++.h	/^  inline const char* func(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
func	module/easylogging++.h	/^  inline const std::string& func(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
generateNew	module/easylogging++.cc	/^void StackTrace::generateNew(void) {$/;"	f	class:el::base::debug::StackTrace
get	module/easylogging++.cc	/^Logger* RegisteredLoggers::get(const std::string& id, bool forceCreation) {$/;"	f	class:el::base::RegisteredLoggers
get	module/easylogging++.h	/^  T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
get	module/easylogging++.h	/^  T_Ptr* get(const T_Key& uniqKey) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
get	module/easylogging++.h	/^  inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
getBashOutput	module/easylogging++.cc	/^const std::string OS::getBashOutput(const char* command) {$/;"	f	class:el::base::utils::OS
getConfigByRef	module/easylogging++.h	/^  inline Conf_T& getConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
getConfigByVal	module/easylogging++.h	/^  inline Conf_T getConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
getContainer	module/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterablePriorityQueue
getContainer	module/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableQueue
getContainer	module/easylogging++.h	/^  inline Container& getContainer(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableStack
getCounter	module/easylogging++.h	/^  inline const base::HitCounter* getCounter(const char* filename, base::type::LineNumber lineNumber) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::RegisteredHitCounters
getCurrentThreadId	module/easylogging++.h	/^static inline std::string getCurrentThreadId(void) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading
getCurrentThreadId	module/easylogging++.h	/^static std::string getCurrentThreadId(void) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading
getDateTime	module/easylogging++.cc	/^std::string DateTime::getDateTime(const char* format, const base::SubsecondPrecision* ssPrec) {$/;"	f	class:el::base::utils::DateTime
getDeviceName	module/easylogging++.cc	/^std::string OS::getDeviceName(void) {$/;"	f	class:el::base::utils::OS
getEnvironmentVariable	module/easylogging++.cc	/^std::string OS::getEnvironmentVariable(const char* variableName, const char* defaultVal,$/;"	f	class:el::base::utils::OS
getFormattedTimeTaken	module/easylogging++.cc	/^const base::type::string_t PerformanceTracker::getFormattedTimeTaken(struct timeval startTime) const {$/;"	f	class:el::base::PerformanceTracker
getFormattedTimeTaken	module/easylogging++.h	/^  const inline base::type::string_t getFormattedTimeTaken() const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
getLatestStack	module/easylogging++.h	/^  inline std::vector<StackTraceEntry>& getLatestStack(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace
getLogger	module/easylogging++.cc	/^Logger* Loggers::getLogger(const std::string& identity, bool registerIfNotAvailable) {$/;"	f	class:el::Loggers
getParamValue	module/easylogging++.cc	/^const char* CommandLineArgs::getParamValue(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs
getProperty	module/easylogging++.cc	/^std::string OS::getProperty(const char* prop) {$/;"	f	class:el::base::utils::OS
getSizeOfFile	module/easylogging++.cc	/^std::size_t File::getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	class:el::base::utils::File
getThreadName	module/easylogging++.h	/^  inline std::string getThreadName(const std::string& threadId) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
getThreadName	module/easylogging++.h	/^  static inline std::string getThreadName() {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
getTimeDifference	module/easylogging++.cc	/^unsigned long long DateTime::getTimeDifference(const struct timeval& endTime, const struct timeval& startTime,$/;"	f	class:el::base::utils::DateTime
getULong	module/easylogging++.cc	/^unsigned long TypedConfigurations::getULong(std::string confVal) {$/;"	f	class:el::base::TypedConfigurations
getWindowsEnvironmentVariable	module/easylogging++.cc	/^const char* OS::getWindowsEnvironmentVariable(const char* varname) {$/;"	f	class:el::base::utils::OS
gettimeofday	module/easylogging++.cc	/^void DateTime::gettimeofday(struct timeval* tv) {$/;"	f	class:el::base::utils::DateTime
handle	module/easylogging++.cc	/^void AsyncDispatchWorker::handle(AsyncLogItem* logItem) {$/;"	f	class:el::base::AsyncDispatchWorker
handle	module/easylogging++.cc	/^void AsyncLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	class:el::base::AsyncLogDispatchCallback
handle	module/easylogging++.cc	/^void DefaultLogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	class:el::base::DefaultLogDispatchCallback
handle	module/easylogging++.cc	/^void LogDispatchCallback::handle(const LogDispatchData* data) {$/;"	f	class:el::LogDispatchCallback
handle	module/easylogging++.h	/^  void handle(const PerformanceTrackingData* data) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::DefaultPerformanceTrackingCallback
has	module/easylogging++.h	/^  inline bool has(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
hasConfiguration	module/easylogging++.cc	/^bool Configurations::hasConfiguration(ConfigurationType configurationType) {$/;"	f	class:el::Configurations
hasConfiguration	module/easylogging++.cc	/^bool Configurations::hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Configurations
hasCustomFormatSpecifier	module/easylogging++.cc	/^bool Storage::hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::base::Storage
hasCustomFormatSpecifier	module/easylogging++.h	/^  static inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
hasFlag	module/easylogging++.h	/^  inline bool hasFlag(LoggingFlag flag) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
hasFlag	module/easylogging++.h	/^  inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
hasFlag	module/easylogging++.h	/^  static inline bool hasFlag(LoggingFlag flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
hasFlag	module/easylogging++.h	/^static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
hasLogger	module/easylogging++.cc	/^bool Loggers::hasLogger(const std::string& identity) {$/;"	f	class:el::Loggers
hasParam	module/easylogging++.cc	/^bool CommandLineArgs::hasParam(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs
hasParamWithValue	module/easylogging++.cc	/^bool CommandLineArgs::hasParamWithValue(const char* paramKey) const {$/;"	f	class:el::base::utils::CommandLineArgs
hash	module/easylogging++.h	/^template<> struct hash<el::Level> {$/;"	s	namespace:el::std
hitCounters	module/easylogging++.h	/^  inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
hitCounts	module/easylogging++.h	/^  inline std::size_t hitCounts(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
iActiveFd	pthread_manager/pthread_manager.h	/^	int iActiveFd;$/;"	m	class:threadArg
iRootEpfd	pthread_manager/pthread_manager.h	/^	int iRootEpfd;$/;"	m	class:threadArg
id	module/easylogging++.h	/^  inline const std::string& id(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
ignoreComments	module/easylogging++.cc	/^void Configurations::Parser::ignoreComments(std::string* line) {$/;"	f	class:el::Configurations::Parser
increment	module/easylogging++.h	/^  inline void increment(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
init	module/easylogging++.cc	/^void SubsecondPrecision::init(int width) {$/;"	f	class:el::base::SubsecondPrecision
init	module/easylogging++.h	/^  inline void init(base::PerformanceTracker* performanceTracker, bool firstCheckpoint = false) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
initUnflushedCount	module/easylogging++.cc	/^void Logger::initUnflushedCount(void) {$/;"	f	class:el::Logger
initialize	module/easylogging++.cc	/^void MessageBuilder::initialize(Logger* logger) {$/;"	f	class:el::base::MessageBuilder
initializeLogger	module/easylogging++.cc	/^void Writer::initializeLogger(const std::string& loggerId, bool lookup, bool needLock) {$/;"	f	class:el::base::Writer
insertFile	module/easylogging++.cc	/^void TypedConfigurations::insertFile(Level level, const std::string& fullFilename) {$/;"	f	class:el::base::TypedConfigurations
installCallback	module/easylogging++.h	/^  static bool installCallback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Utils
installCustomFormatSpecifier	module/easylogging++.cc	/^void Storage::installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::base::Storage
installCustomFormatSpecifier	module/easylogging++.h	/^  static inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
installLogDispatchCallback	module/easylogging++.h	/^  inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
installLogDispatchCallback	module/easylogging++.h	/^  static inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
installLoggerRegistrationCallback	module/easylogging++.h	/^  inline bool installLoggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
installLoggerRegistrationCallback	module/easylogging++.h	/^  static inline bool installLoggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
installPerformanceTrackingCallback	module/easylogging++.h	/^  inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
installPerformanceTrackingCallback	module/easylogging++.h	/^  static inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
installPreRollOutCallback	module/easylogging++.h	/^  static inline void installPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
internal	module/easylogging++.h	/^namespace internal {$/;"	n	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading
isComment	module/easylogging++.cc	/^bool Configurations::Parser::isComment(const std::string& line) {$/;"	f	class:el::Configurations::Parser
isConfig	module/easylogging++.cc	/^bool Configurations::Parser::isConfig(const std::string& line) {$/;"	f	class:el::Configurations::Parser
isDigit	module/easylogging++.h	/^  static inline bool isDigit(char c) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Str
isFlushNeeded	module/easylogging++.h	/^  inline bool isFlushNeeded(Level level) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
isLevel	module/easylogging++.cc	/^bool Configurations::Parser::isLevel(const std::string& line) {$/;"	f	class:el::Configurations::Parser
isValidId	module/easylogging++.cc	/^bool Logger::isValidId(const std::string& id) {$/;"	f	class:el::Logger
iterator	module/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
iterator	module/easylogging++.h	/^  typedef typename Container::iterator iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableContainer
iterator	module/easylogging++.h	/^  typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
iterator	module/easylogging++.h	/^  typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
kAm	module/easylogging++.cc	/^static const char* kAm                              =      "AM";$/;"	m	namespace:el::base::consts	file:
kAppNameFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app");$/;"	m	namespace:el::base::consts	file:
kConfigurationComment	module/easylogging++.cc	/^static const char* kConfigurationComment                   =      "##";$/;"	m	namespace:el::base::consts	file:
kConfigurationLevel	module/easylogging++.cc	/^static const char* kConfigurationLevel                     =      "*";$/;"	m	namespace:el::base::consts	file:
kConfigurationLoggerId	module/easylogging++.cc	/^static const char* kConfigurationLoggerId                  =      "--";$/;"	m	namespace:el::base::consts	file:
kCrashSignals	module/easylogging++.h	/^} kCrashSignals[] = {$/;"	m	namespace:el::el::ConfigurationType::base::consts	typeref:struct:el::el::ConfigurationType::base::consts::__anon2
kCrashSignalsCount	module/easylogging++.h	/^static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \/ sizeof(kCrashSignals[0]);$/;"	m	namespace:el::el::ConfigurationType::base::consts
kCurrentHostFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host");$/;"	m	namespace:el::base::consts	file:
kCurrentUserFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user");$/;"	m	namespace:el::base::consts	file:
kDateTimeFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%datetime");$/;"	m	namespace:el::base::consts	file:
kDateTimeFormatSpecifierForFilename	module/easylogging++.cc	/^static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	m	namespace:el::base::consts	file:
kDays	module/easylogging++.cc	/^static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };$/;"	m	namespace:el::base::consts	file:
kDaysAbbrev	module/easylogging++.cc	/^static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };$/;"	m	namespace:el::base::consts	file:
kDebugLevelLogValue	module/easylogging++.cc	/^static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	m	namespace:el::base::consts	file:
kDebugLevelShortLogValue	module/easylogging++.cc	/^static const base::type::char_t* kDebugLevelShortLogValue    =   ELPP_LITERAL("D");$/;"	m	namespace:el::base::consts	file:
kDefaultDateTimeFormat	module/easylogging++.cc	/^static const char* kDefaultDateTimeFormat           =      "%Y-%M-%d %H:%m:%s,%g";$/;"	m	namespace:el::base::consts	file:
kDefaultDateTimeFormatInFilename	module/easylogging++.cc	/^static const char* kDefaultDateTimeFormatInFilename =      "%Y-%M-%d_%H-%m";$/;"	m	namespace:el::base::consts	file:
kDefaultLogFile	module/easylogging++.cc	/^static const char* kDefaultLogFile                         =      ".\/log\/wtf.log";$/;"	m	namespace:el::base::consts	file:
kDefaultLogFile	module/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "\/dev\/null";$/;"	m	namespace:el::base::consts	file:
kDefaultLogFile	module/easylogging++.cc	/^static const char* kDefaultLogFile                         =      "nul";$/;"	m	namespace:el::base::consts	file:
kDefaultLogFile	module/easylogging++.cc	/^static const char* kDefaultLogFile                         =      ELPP_DEFAULT_LOG_FILE;$/;"	m	namespace:el::base::consts	file:
kDefaultLogFileParam	module/easylogging++.cc	/^static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	m	namespace:el::base::consts	file:
kDefaultLoggerId	module/easylogging++.h	/^static const char* kDefaultLoggerId                        =      "default";$/;"	m	namespace:el::el::ConfigurationType::base::consts
kDefaultLoggerId	module/easylogging++.h	/^static const char* kDefaultLoggerId                        =      ELPP_DEFAULT_LOGGER;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kDefaultSubsecondPrecision	module/easylogging++.h	/^static const unsigned int kDefaultSubsecondPrecision       =      3;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kErrorLevelLogValue	module/easylogging++.cc	/^static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	m	namespace:el::base::consts	file:
kErrorLevelShortLogValue	module/easylogging++.cc	/^static const base::type::char_t* kErrorLevelShortLogValue    =   ELPP_LITERAL("E");$/;"	m	namespace:el::base::consts	file:
kFatalLevelLogValue	module/easylogging++.cc	/^static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	m	namespace:el::base::consts	file:
kFatalLevelShortLogValue	module/easylogging++.cc	/^static const base::type::char_t* kFatalLevelShortLogValue    =   ELPP_LITERAL("F");$/;"	m	namespace:el::base::consts	file:
kFilePathSeperator	module/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\/";$/;"	m	namespace:el::el::ConfigurationType::base::consts
kFilePathSeperator	module/easylogging++.h	/^static const char* kFilePathSeperator                      =      "\\\\";$/;"	m	namespace:el::el::ConfigurationType::base::consts
kFormatSpecifierChar	module/easylogging++.h	/^static const char  kFormatSpecifierChar                    =      '%';$/;"	m	namespace:el::el::ConfigurationType::base::consts
kFormatSpecifierCharValue	module/easylogging++.h	/^static const char  kFormatSpecifierCharValue               =      'v';$/;"	m	namespace:el::el::ConfigurationType::base::consts
kInfoLevelLogValue	module/easylogging++.cc	/^static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO");$/;"	m	namespace:el::base::consts	file:
kInfoLevelShortLogValue	module/easylogging++.cc	/^static const base::type::char_t* kInfoLevelShortLogValue     =   ELPP_LITERAL("I");$/;"	m	namespace:el::base::consts	file:
kLogFileBaseFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kLogFileBaseFormatSpecifier      =      ELPP_LITERAL("%fbase");$/;"	m	namespace:el::base::consts	file:
kLogFileFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file");$/;"	m	namespace:el::base::consts	file:
kLogFunctionFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func");$/;"	m	namespace:el::base::consts	file:
kLogLineFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line");$/;"	m	namespace:el::base::consts	file:
kLogLocationFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc");$/;"	m	namespace:el::base::consts	file:
kLoggerIdFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logger");$/;"	m	namespace:el::base::consts	file:
kLoggingFlagsParam	module/easylogging++.cc	/^static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	m	namespace:el::base::consts	file:
kMaxLogPerContainer	module/easylogging++.h	/^static const unsigned int kMaxLogPerContainer              =      100;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kMaxLogPerCounter	module/easylogging++.h	/^static const unsigned int kMaxLogPerCounter                =      100000;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kMaxStack	module/easylogging++.h	/^  static const unsigned int kMaxStack = 64;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace
kMaxValid	module/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(ConfigurationType::MaxLogFileSize);$/;"	m	class:el::el::ConfigurationType::ConfigurationTypeHelper
kMaxValid	module/easylogging++.h	/^  static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info);$/;"	m	class:el::el::LevelHelper
kMaxVerboseLevel	module/easylogging++.cc	/^static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	m	namespace:el::base::consts	file:
kMessageFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg");$/;"	m	namespace:el::base::consts	file:
kMinValid	module/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(ConfigurationType::Enabled);$/;"	m	class:el::el::ConfigurationType::ConfigurationTypeHelper
kMinValid	module/easylogging++.h	/^  static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace);$/;"	m	class:el::el::LevelHelper
kMonths	module/easylogging++.cc	/^static const char* kMonths[12]                      =      { "January", "February", "March", "Apri", "May", "June", "July", "August",$/;"	m	namespace:el::base::consts	file:
kMonthsAbbrev	module/easylogging++.cc	/^static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };$/;"	m	namespace:el::base::consts	file:
kNullPointer	module/easylogging++.cc	/^static const char* kNullPointer                            =      "nullptr";$/;"	m	namespace:el::base::consts	file:
kPerformanceLoggerId	module/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      "performance";$/;"	m	namespace:el::el::ConfigurationType::base::consts
kPerformanceLoggerId	module/easylogging++.h	/^static const char* kPerformanceLoggerId                    =      ELPP_DEFAULT_PERFORMANCE_LOGGER;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kPerformanceTrackerDefaultLevel	module/easylogging++.h	/^static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kPm	module/easylogging++.cc	/^static const char* kPm                              =      "PM";$/;"	m	namespace:el::base::consts	file:
kSeverityLevelFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%level");$/;"	m	namespace:el::base::consts	file:
kSeverityLevelShortFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kSeverityLevelShortFormatSpecifier    =      ELPP_LITERAL("%levshort");$/;"	m	namespace:el::base::consts	file:
kSourceFilenameMaxLength	module/easylogging++.h	/^static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kSourceLineMaxLength	module/easylogging++.h	/^static const std::size_t kSourceLineMaxLength              =      10;$/;"	m	namespace:el::el::ConfigurationType::base::consts
kStackStart	module/easylogging++.h	/^  static const unsigned int kStackStart = 2;  \/\/ We want to skip c'tor and StackTrace::generateNew()$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace
kSysLogLoggerId	module/easylogging++.h	/^static const char* kSysLogLoggerId                         =      "syslog";$/;"	m	namespace:el::el::ConfigurationType::base::consts
kThreadIdFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thread");$/;"	m	namespace:el::base::consts	file:
kTimeFormats	module/easylogging++.h	/^} kTimeFormats[] = {$/;"	m	namespace:el::el::ConfigurationType::base::consts	typeref:struct:el::el::ConfigurationType::base::consts::__anon1
kTimeFormatsCount	module/easylogging++.h	/^static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ sizeof(kTimeFormats[0]);$/;"	m	namespace:el::el::ConfigurationType::base::consts
kTraceLevelLogValue	module/easylogging++.cc	/^static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	m	namespace:el::base::consts	file:
kTraceLevelShortLogValue	module/easylogging++.cc	/^static const base::type::char_t* kTraceLevelShortLogValue    =   ELPP_LITERAL("T");$/;"	m	namespace:el::base::consts	file:
kUnknownHost	module/easylogging++.cc	/^static const char* kUnknownHost                            =      "unknown-host";$/;"	m	namespace:el::base::consts	file:
kUnknownUser	module/easylogging++.cc	/^static const char* kUnknownUser                            =      "user";$/;"	m	namespace:el::base::consts	file:
kValidLoggerIdSymbols	module/easylogging++.cc	/^static const char* kValidLoggerIdSymbols                   =$/;"	m	namespace:el::base::consts	file:
kVerboseLevelFormatSpecifier	module/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlevel");$/;"	m	namespace:el::base::consts	file:
kVerboseLevelLogValue	module/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelLogValue  =$/;"	m	namespace:el::base::consts	file:
kVerboseLevelShortLogValue	module/easylogging++.cc	/^static const base::type::char_t* kVerboseLevelShortLogValue  =   ELPP_LITERAL("V");$/;"	m	namespace:el::base::consts	file:
kWarningLevelLogValue	module/easylogging++.cc	/^static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARNING");$/;"	m	namespace:el::base::consts	file:
kWarningLevelShortLogValue	module/easylogging++.cc	/^static const base::type::char_t* kWarningLevelShortLogValue  =   ELPP_LITERAL("W");$/;"	m	namespace:el::base::consts	file:
kYearBase	module/easylogging++.cc	/^static const int kYearBase                          =      1900;$/;"	m	namespace:el::base::consts	file:
lastCheckpointTime	module/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::lastCheckpointTime() const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::PerformanceTrackingData
level	module/easylogging++.cc	/^  Level level;$/;"	m	struct:el::StringToLevelItem	file:
level	module/easylogging++.h	/^  inline Level level(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
level	module/easylogging++.h	/^  inline Level level(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
level	module/easylogging++.h	/^  inline Level level(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
level	module/easylogging++.h	/^  inline Level level(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
level	module/easylogging++.h	/^  inline base::type::VerboseLevel level(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::VRegistry
levelString	module/easylogging++.cc	/^  const char* levelString;$/;"	m	struct:el::StringToLevelItem	file:
line	module/easylogging++.h	/^  inline base::type::LineNumber line(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
line	module/easylogging++.h	/^  inline base::type::LineNumber line(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
lineNumber	module/easylogging++.h	/^  inline base::type::LineNumber lineNumber(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
lock	module/easylogging++.h	/^  inline void lock(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::Mutex
log	module/easylogging++.cc	/^void Configuration::log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Configuration
log	module/easylogging++.h	/^  virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
log	module/easylogging++.h	/^  virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
log	module/easylogging++.h	/^  virtual void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
log	module/easylogging++.h	/^inline void Logger::log(Level level, const T& log) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
log	module/easylogging++.h	/^inline void Logger::log(Level level, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
logBuilder	module/easylogging++.h	/^  inline LogBuilder* logBuilder(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
logCrashReason	module/easylogging++.cc	/^static void logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logger) {$/;"	f	namespace:el::base::debug
logCrashReason	module/easylogging++.cc	/^void Helpers::logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logger) {$/;"	f	class:el::Helpers
logDispatchCallback	module/easylogging++.h	/^  inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
logDispatchCallback	module/easylogging++.h	/^  static inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
logFlushThreshold	module/easylogging++.cc	/^std::size_t TypedConfigurations::logFlushThreshold(Level level) {$/;"	f	class:el::base::TypedConfigurations
logFormat	module/easylogging++.cc	/^const base::LogFormat& TypedConfigurations::logFormat(Level level) {$/;"	f	class:el::base::TypedConfigurations
logInit	resource_init/logInit.cpp	/^int logInit()$/;"	f
logLine	module/easylogging++.h	/^  inline base::type::string_t logLine(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
logMessage	module/easylogging++.h	/^  inline LogMessage* logMessage(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
logMessage	module/easylogging++.h	/^  inline const LogMessage* logMessage(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchData
logStreamsReference	module/easylogging++.cc	/^const base::LogStreamsReferenceMap* Loggers::logStreamsReference(void) {$/;"	f	class:el::Loggers
logStreamsReference	module/easylogging++.h	/^  inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
log_	module/easylogging++.h	/^void Logger::log_(Level level, int vlevel, const T& log) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
log_	module/easylogging++.h	/^void Logger::log_(Level level, int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
logger	module/easylogging++.h	/^  inline Logger* logger(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
loggerId	module/easylogging++.h	/^inline const std::string& PerformanceTrackingData::loggerId(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::PerformanceTrackingData
loggerRegistrationCallback	module/easylogging++.h	/^  inline T* loggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
loggerRegistrationCallback	module/easylogging++.h	/^  static inline T* loggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
ltrim	module/easylogging++.cc	/^std::string& Str::ltrim(std::string& str) {$/;"	f	class:el::base::utils::Str
m_addr	module/easylogging++.h	/^    std::string m_addr;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace::StackTraceEntry
m_argc	module/easylogging++.h	/^  int m_argc;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
m_argv	module/easylogging++.h	/^  char** m_argv;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
m_asyncDispatchWorker	module/easylogging++.h	/^  base::IWorker* m_asyncDispatchWorker;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_asyncLogQueue	module/easylogging++.h	/^  base::AsyncLogQueue* m_asyncLogQueue;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_blockName	module/easylogging++.h	/^  std::string m_blockName;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_checkpointId	module/easylogging++.h	/^  std::string m_checkpointId;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_commandLineArgs	module/easylogging++.h	/^  base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_configurationFile	module/easylogging++.h	/^  std::string m_configurationFile;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
m_configurationType	module/easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::Configuration::Predicate
m_configurationType	module/easylogging++.h	/^  ConfigurationType m_configurationType;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
m_configurations	module/easylogging++.h	/^  Configurations m_configurations;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_configurations	module/easylogging++.h	/^  Configurations* m_configurations;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_containerLogSeperator	module/easylogging++.h	/^  const base::type::char_t* m_containerLogSeperator;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
m_continueRunning	module/easylogging++.h	/^  bool m_continueRunning;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncDispatchWorker
m_continueRunningLock	module/easylogging++.h	/^  base::threading::Mutex m_continueRunningLock;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncDispatchWorker
m_currentHost	module/easylogging++.h	/^  std::string m_currentHost;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
m_currentUser	module/easylogging++.h	/^  std::string m_currentUser;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
m_customFormatSpecifiers	module/easylogging++.h	/^  std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_customFormatSpecifiersLock	module/easylogging++.h	/^  base::threading::Mutex m_customFormatSpecifiersLock;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_data	module/easylogging++.h	/^  const LogDispatchData* m_data;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::DefaultLogDispatchCallback
m_data	module/easylogging++.h	/^  const PerformanceTrackingData* m_data;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::DefaultPerformanceTrackingCallback
m_dataType	module/easylogging++.h	/^  PerformanceTrackingData::DataType m_dataType;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_dateTimeFormat	module/easylogging++.h	/^  std::string m_dateTimeFormat;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
m_defaultConfigurations	module/easylogging++.h	/^  Configurations m_defaultConfigurations;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
m_defaultLogBuilder	module/easylogging++.h	/^  LogBuilderPtr m_defaultLogBuilder;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
m_demangled	module/easylogging++.h	/^    std::string m_demangled;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace::StackTraceEntry
m_dispatchAction	module/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchData
m_dispatchAction	module/easylogging++.h	/^  base::DispatchAction m_dispatchAction;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::LogDispatcher
m_dispatchData	module/easylogging++.h	/^  LogDispatchData m_dispatchData;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
m_enabled	module/easylogging++.h	/^  bool m_enabled;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Callback
m_enabled	module/easylogging++.h	/^  bool m_enabled;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_enabledMap	module/easylogging++.h	/^  std::unordered_map<Level, bool> m_enabledMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_endTime	module/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker	typeref:struct:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker::
m_file	module/easylogging++.h	/^  const char* m_file;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_file	module/easylogging++.h	/^  std::string m_file;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
m_fileLocks	module/easylogging++.h	/^  std::unordered_map<std::string, std::unique_ptr<base::threading::Mutex>> m_fileLocks;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchCallback
m_fileLocksMapLock	module/easylogging++.h	/^  base::threading::Mutex m_fileLocksMapLock;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchCallback
m_fileStreamMap	module/easylogging++.h	/^  std::unordered_map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_filename	module/easylogging++.h	/^    const char* m_filename;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter::Predicate
m_filename	module/easylogging++.h	/^  const char* m_filename;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
m_filenameMap	module/easylogging++.h	/^  std::unordered_map<Level, std::string> m_filenameMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_firstCheckpoint	module/easylogging++.h	/^  bool m_firstCheckpoint;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_flag	module/easylogging++.h	/^    LoggingFlag m_flag;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers::ScopedAddFlag
m_flag	module/easylogging++.h	/^    LoggingFlag m_flag;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers::ScopedRemoveFlag
m_flags	module/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
m_flags	module/easylogging++.h	/^  base::type::EnumType m_flags;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_format	module/easylogging++.h	/^  base::type::string_t m_format;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
m_formatSpecifier	module/easylogging++.h	/^  const char* m_formatSpecifier;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::CustomFormatSpecifier
m_formattedTimeTaken	module/easylogging++.h	/^  base::type::string_t m_formattedTimeTaken;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_func	module/easylogging++.h	/^  const char* m_func;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_func	module/easylogging++.h	/^  std::string m_func;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
m_handler	module/easylogging++.h	/^  Handler m_handler;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::CrashHandler
m_hasChecked	module/easylogging++.h	/^  bool m_hasChecked;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_hex	module/easylogging++.h	/^    std::string m_hex;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace::StackTraceEntry
m_hitCounts	module/easylogging++.h	/^  std::size_t m_hitCounts;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
m_id	module/easylogging++.h	/^  std::string m_id;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_index	module/easylogging++.h	/^    std::size_t m_index;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace::StackTraceEntry
m_isConfigured	module/easylogging++.h	/^  bool m_isConfigured;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_isFromFile	module/easylogging++.h	/^  bool m_isFromFile;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
m_lastCheckpointId	module/easylogging++.h	/^  std::string m_lastCheckpointId;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_lastCheckpointTime	module/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker	typeref:struct:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker::
m_level	module/easylogging++.h	/^    Level m_level;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::Configuration::Predicate
m_level	module/easylogging++.h	/^  Level m_level;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
m_level	module/easylogging++.h	/^  Level m_level;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
m_level	module/easylogging++.h	/^  Level m_level;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
m_level	module/easylogging++.h	/^  Level m_level;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_level	module/easylogging++.h	/^  base::type::VerboseLevel m_level;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::VRegistry
m_line	module/easylogging++.h	/^  base::type::LineNumber m_line;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
m_line	module/easylogging++.h	/^  base::type::LineNumber m_line;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_lineNumber	module/easylogging++.h	/^    base::type::LineNumber m_lineNumber;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter::Predicate
m_lineNumber	module/easylogging++.h	/^  base::type::LineNumber m_lineNumber;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
m_list	module/easylogging++.h	/^  Container m_list;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
m_location	module/easylogging++.h	/^    std::string m_location;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace::StackTraceEntry
m_logBuilder	module/easylogging++.h	/^  LogBuilderPtr m_logBuilder;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_logDispatchCallbacks	module/easylogging++.h	/^  std::unordered_map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_logFlushThresholdMap	module/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_logFormatMap	module/easylogging++.h	/^  std::unordered_map<Level, base::LogFormat> m_logFormatMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_logLine	module/easylogging++.h	/^  base::type::string_t m_logLine;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
m_logMessage	module/easylogging++.h	/^  LogMessage m_logMessage;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
m_logMessage	module/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchData
m_logMessage	module/easylogging++.h	/^  LogMessage* m_logMessage;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::LogDispatcher
m_logStreamsReference	module/easylogging++.h	/^  base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
m_logStreamsReference	module/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_logStreamsReference	module/easylogging++.h	/^  base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_logger	module/easylogging++.h	/^  Logger* m_logger;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
m_logger	module/easylogging++.h	/^  Logger* m_logger;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
m_loggerId	module/easylogging++.h	/^  std::string m_loggerId;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_loggerRegistrationCallbacks	module/easylogging++.h	/^  std::unordered_map<std::string, base::type::LoggerRegistrationCallbackPtr> m_loggerRegistrationCallbacks;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
m_loggingLevel	module/easylogging++.h	/^  Level m_loggingLevel;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_maxLogFileSizeMap	module/easylogging++.h	/^  std::unordered_map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_message	module/easylogging++.h	/^  base::type::string_t m_message;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
m_modules	module/easylogging++.h	/^  std::unordered_map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::VRegistry
m_mutex	module/easylogging++.h	/^  M* m_mutex;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
m_mutex	module/easylogging++.h	/^  base::threading::Mutex m_mutex;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::ThreadSafe
m_offset	module/easylogging++.h	/^  unsigned int m_offset;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::SubsecondPrecision
m_pFlags	module/easylogging++.h	/^  base::type::EnumType* m_pFlags;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::VRegistry
m_params	module/easylogging++.h	/^  std::vector<std::string> m_params;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
m_paramsWithValue	module/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_paramsWithValue;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
m_parentApplicationName	module/easylogging++.h	/^  std::string m_parentApplicationName;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_performanceTracker	module/easylogging++.h	/^  base::PerformanceTracker* m_performanceTracker;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
m_performanceTrackingCallbacks	module/easylogging++.h	/^  std::unordered_map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrackingCallbacks;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_performanceTrackingMap	module/easylogging++.h	/^  std::unordered_map<Level, bool> m_performanceTrackingMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_preRollOutCallback	module/easylogging++.h	/^  PreRollOutCallback m_preRollOutCallback;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_proceed	module/easylogging++.h	/^  bool m_proceed;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::LogDispatcher
m_queue	module/easylogging++.h	/^  std::queue<AsyncLogItem> m_queue;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogQueue
m_registeredHitCounters	module/easylogging++.h	/^  base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_registeredLoggers	module/easylogging++.h	/^  base::RegisteredLoggers* m_registeredLoggers;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_resolver	module/easylogging++.h	/^  FormatSpecifierValueResolver m_resolver;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::CustomFormatSpecifier
m_scopedLog	module/easylogging++.h	/^  bool m_scopedLog;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_stack	module/easylogging++.h	/^  std::vector<StackTraceEntry> m_stack;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace
m_startTime	module/easylogging++.h	/^  struct timeval m_startTime, m_endTime, m_lastCheckpointTime;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker	typeref:struct:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker::timeval
m_stream	module/easylogging++.h	/^  base::type::stringstream_t m_stream;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_subsecondPrecisionMap	module/easylogging++.h	/^  std::unordered_map<Level, base::SubsecondPrecision> m_subsecondPrecisionMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_termSupportsColor	module/easylogging++.h	/^  bool m_termSupportsColor;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogBuilder
m_threadNames	module/easylogging++.h	/^  std::unordered_map<std::string, std::string> m_threadNames;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_threadNamesLock	module/easylogging++.h	/^  base::threading::Mutex m_threadNamesLock;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_timestampUnit	module/easylogging++.h	/^  base::TimestampUnit m_timestampUnit;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::PerformanceTracker
m_toFileMap	module/easylogging++.h	/^  std::unordered_map<Level, bool> m_toFileMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_toStandardOutputMap	module/easylogging++.h	/^  std::unordered_map<Level, bool> m_toStandardOutputMap;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
m_typedConfigurations	module/easylogging++.h	/^  base::TypedConfigurations* m_typedConfigurations;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_underlyingMutex	module/easylogging++.h	/^  CRITICAL_SECTION m_underlyingMutex;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_underlyingMutex	module/easylogging++.h	/^  pthread_mutex_t m_underlyingMutex;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_unflushedCount	module/easylogging++.h	/^  std::unordered_map<Level, unsigned int> m_unflushedCount;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
m_userFormat	module/easylogging++.h	/^  base::type::string_t m_userFormat;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
m_vRegistry	module/easylogging++.h	/^  base::VRegistry* m_vRegistry;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
m_value	module/easylogging++.h	/^  std::string m_value;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
m_verboseLevel	module/easylogging++.h	/^  base::type::VerboseLevel m_verboseLevel;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
m_width	module/easylogging++.h	/^  int m_width;$/;"	m	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::SubsecondPrecision
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
maxLogFileSize	module/easylogging++.cc	/^std::size_t TypedConfigurations::maxLogFileSize(Level level) {$/;"	f	class:el::base::TypedConfigurations
message	module/easylogging++.h	/^  inline const base::type::string_t& message(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
millisecondsWidth	module/easylogging++.cc	/^const base::MillisecondsWidth& TypedConfigurations::millisecondsWidth(Level level) {$/;"	f	class:el::base::TypedConfigurations
modules	module/easylogging++.h	/^  inline const std::unordered_map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::VRegistry
msleep	module/easylogging++.cc	/^static void msleep(int ms) {$/;"	f	namespace:el::base::threading
myFork	process_manager/myFork.cpp	/^pid_t myFork()$/;"	f
myWaitpid_wnohang	process_manager/myWaitpid_wnohang.cpp	/^pid_t myWaitpid_wnohang(pid_t pid,int* wstatus)$/;"	f
name	module/easylogging++.h	/^  const char* name;$/;"	m	struct:el::el::ConfigurationType::base::consts::__anon2
newFileStream	module/easylogging++.cc	/^base::type::fstream_t* File::newFileStream(const std::string& filename) {$/;"	f	class:el::base::utils::File
next	module/easylogging++.h	/^  inline AsyncLogItem next(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogQueue
numb	module/easylogging++.h	/^  int numb;$/;"	m	struct:el::el::ConfigurationType::base::consts::__anon2
operator !=	module/easylogging++.h	/^  bool operator!=(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
operator ()	module/easylogging++.cc	/^bool Configuration::Predicate::operator()(const Configuration* conf) const {$/;"	f	class:el::Configuration::Predicate
operator ()	module/easylogging++.h	/^    inline bool operator()(const HitCounter* counter) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter::Predicate
operator ()	module/easylogging++.h	/^  std::size_t operator()(const el::Level& l) const {$/;"	f	struct:el::std::hash
operator <<	module/easylogging++.cc	/^MessageBuilder& MessageBuilder::operator<<(const wchar_t* msg) {$/;"	f	class:el::base::MessageBuilder
operator <<	module/easylogging++.cc	/^base::type::ostream_t& operator<<(base::type::ostream_t& os, const CommandLineArgs& c) {$/;"	f	namespace:el::base::utils
operator <<	module/easylogging++.cc	/^std::ostream& operator<<(std::ostream& os, const StackTrace& st) {$/;"	f	namespace:el::base::debug
operator <<	module/easylogging++.cc	/^std::ostream& operator<<(std::ostream& ss, const StackTrace::StackTraceEntry& si) {$/;"	f	namespace:el::base::debug
operator <<	module/easylogging++.h	/^  MessageBuilder& operator<<(const QHash<K, V>& hash_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  MessageBuilder& operator<<(const QMap<K, V>& map_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  MessageBuilder& operator<<(const QPair<First, Second>& pair_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  MessageBuilder& operator<<(const std::bitset<Size>& bitset_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  MessageBuilder& operator<<(const std::pair<First, Second>& pair_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  friend base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWithPred& sr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
operator <<	module/easylogging++.h	/^  friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Loggable& loggable) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Loggable
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(QChar msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const QByteArray& msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const QLatin1String& msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const QMultiHash<K, V>& multiHash_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const QMultiMap<K, V>& map_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const QString& msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const QStringRef& msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::array<T, Size>& array) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::priority_queue<T, Container, Comparator>& priorityQueue_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::queue<T, Container>& queue_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::stack<T, Container>& stack_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::string& msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(const std::wstring& msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(qint64 msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline MessageBuilder& operator<<(quint64 msg) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
operator <<	module/easylogging++.h	/^  inline NullWriter& operator<<(const T&) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::NullWriter
operator <<	module/easylogging++.h	/^  inline NullWriter& operator<<(std::ostream& (*)(std::ostream&)) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::NullWriter
operator <<	module/easylogging++.h	/^  inline Writer& operator<<(const T& log) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Writer
operator =	module/easylogging++.cc	/^Configuration& Configuration::operator=(const Configuration& c) {$/;"	f	class:el::Configuration
operator =	module/easylogging++.cc	/^LogFormat& LogFormat::operator=(const LogFormat& logFormat) {$/;"	f	class:el::base::LogFormat
operator =	module/easylogging++.cc	/^Logger& Logger::operator=(const Logger& logger) {$/;"	f	class:el::Logger
operator =	module/easylogging++.h	/^  AbstractRegistry& operator=(AbstractRegistry&& sr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
operator =	module/easylogging++.h	/^  HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
operator =	module/easylogging++.h	/^  Registry& operator=(const Registry& sr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
operator =	module/easylogging++.h	/^  RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
operator ==	module/easylogging++.cc	/^bool LogFormat::operator==(const LogFormat& other) {$/;"	f	class:el::base::LogFormat
operator ==	module/easylogging++.h	/^  bool operator==(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
operator ==	module/easylogging++.h	/^  bool operator==(const SubsecondPrecision& ssPrec) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::SubsecondPrecision
operator ==	module/easylogging++.h	/^  inline bool operator==(const char* formatSpecifier) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::CustomFormatSpecifier
operator bool	module/easylogging++.h	/^  inline operator bool() {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::NullWriter
ostream_t	module/easylogging++.h	/^typedef std::wostream ostream_t;$/;"	t	namespace:el::base::type
parentApplicationName	module/easylogging++.h	/^  inline const std::string& parentApplicationName(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
parseFormat	module/easylogging++.cc	/^char* DateTime::parseFormat(char* buf, std::size_t bufSz, const char* format, const struct tm* tInfo,$/;"	f	class:el::base::utils::DateTime
parseFromFile	module/easylogging++.cc	/^bool Configurations::Parser::parseFromFile(const std::string& configurationFile, Configurations* sender,$/;"	f	class:el::Configurations::Parser
parseFromFile	module/easylogging++.cc	/^bool Configurations::parseFromFile(const std::string& configurationFile, Configurations* base) {$/;"	f	class:el::Configurations
parseFromFormat	module/easylogging++.cc	/^void LogFormat::parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	class:el::base::LogFormat
parseFromText	module/easylogging++.cc	/^bool Configurations::Parser::parseFromText(const std::string& configurationsString, Configurations* sender,$/;"	f	class:el::Configurations::Parser
parseFromText	module/easylogging++.cc	/^bool Configurations::parseFromText(const std::string& configurationsString, Configurations* base) {$/;"	f	class:el::Configurations
parseLine	module/easylogging++.cc	/^bool Configurations::Parser::parseLine(std::string* line, std::string* currConfigStr, std::string* currLevelStr,$/;"	f	class:el::Configurations::Parser
pathExists	module/easylogging++.cc	/^bool File::pathExists(const char* path, bool considerFile) {$/;"	f	class:el::base::utils::File
performanceTracker	module/easylogging++.h	/^  inline const base::PerformanceTracker* performanceTracker(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::DataType
performanceTracking	module/easylogging++.cc	/^bool TypedConfigurations::performanceTracking(Level level) {$/;"	f	class:el::base::TypedConfigurations
performanceTrackingCallback	module/easylogging++.h	/^  inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
performanceTrackingCallback	module/easylogging++.h	/^  static inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
pop	module/easylogging++.h	/^  inline void pop(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogQueue
populateAllLoggerIds	module/easylogging++.cc	/^std::vector<std::string>* Loggers::populateAllLoggerIds(std::vector<std::string>* targetList) {$/;"	f	class:el::Loggers
preRollOutCallback	module/easylogging++.h	/^  inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
processDispatch	module/easylogging++.cc	/^void Writer::processDispatch() {$/;"	f	class:el::base::Writer
push	module/easylogging++.h	/^  inline void push(const AsyncLogItem& item) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogQueue
reconfigure	module/easylogging++.cc	/^void Logger::reconfigure(void) {$/;"	f	class:el::Logger
reconfigureAllLoggers	module/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(Level level, ConfigurationType configurationType,$/;"	f	class:el::Loggers
reconfigureAllLoggers	module/easylogging++.cc	/^void Loggers::reconfigureAllLoggers(const Configurations& configurations) {$/;"	f	class:el::Loggers
reconfigureAllLoggers	module/easylogging++.h	/^  static inline void reconfigureAllLoggers(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
reconfigureLogger	module/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(Logger* logger, const Configurations& configurations) {$/;"	f	class:el::Loggers
reconfigureLogger	module/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, ConfigurationType configurationType,$/;"	f	class:el::Loggers
reconfigureLogger	module/easylogging++.cc	/^Logger* Loggers::reconfigureLogger(const std::string& identity, const Configurations& configurations) {$/;"	f	class:el::Loggers
registerListenSocket	network_manager/registerListenSocket.cpp	/^int registerListenSocket()$/;"	f
registeredLoggers	module/easylogging++.h	/^  inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
reinitDeepCopy	module/easylogging++.h	/^  void reinitDeepCopy(const AbstractRegistry<T_Ptr, Container>& sr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
releaseDate	module/easylogging++.cc	/^const std::string VersionInfo::releaseDate(void) {$/;"	f	class:el::VersionInfo
remove	module/easylogging++.cc	/^bool RegisteredLoggers::remove(const std::string& id) {$/;"	f	class:el::base::RegisteredLoggers
removeFlag	module/easylogging++.h	/^  inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
removeFlag	module/easylogging++.h	/^  static inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
removeFlag	module/easylogging++.h	/^static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
replaceAll	module/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, char replaceWhat, char replaceWith) {$/;"	f	class:el::base::utils::Str
replaceAll	module/easylogging++.cc	/^std::string& Str::replaceAll(std::string& str, const std::string& replaceWhat,$/;"	f	class:el::base::utils::Str
replaceFirstWithEscape	module/easylogging++.cc	/^void Str::replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceWhat,$/;"	f	class:el::base::utils::Str
reserveCustomFormatSpecifiers	module/easylogging++.h	/^  static inline void reserveCustomFormatSpecifiers(std::size_t size) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
resetLocation	module/easylogging++.h	/^  inline void resetLocation(const char* filename, base::type::LineNumber lineNumber) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
resolveFilename	module/easylogging++.cc	/^std::string TypedConfigurations::resolveFilename(const std::string& filename) {$/;"	f	class:el::base::TypedConfigurations
resolveLoggerFormatSpec	module/easylogging++.cc	/^void Logger::resolveLoggerFormatSpec(void) const {$/;"	f	class:el::Logger
resolver	module/easylogging++.h	/^  inline const FormatSpecifierValueResolver& resolver(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::CustomFormatSpecifier
rtrim	module/easylogging++.cc	/^std::string& Str::rtrim(std::string& str) {$/;"	f	class:el::base::utils::Str
run	module/easylogging++.cc	/^void AsyncDispatchWorker::run(void) {$/;"	f	class:el::base::AsyncDispatchWorker
safeDelete	module/easylogging++.h	/^safeDelete(T*& pointer) {$/;"	f	namespace:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils
set	module/easylogging++.cc	/^void Configurations::set(Configuration* conf) {$/;"	f	class:el::Configurations
set	module/easylogging++.cc	/^void Configurations::set(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Configurations
setApplicationArguments	module/easylogging++.cc	/^void Storage::setApplicationArguments(int argc, char** argv) {$/;"	f	class:el::base::Storage
setApplicationArguments	module/easylogging++.h	/^  inline void setApplicationArguments(int argc, const char** argv) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
setArgs	module/easylogging++.cc	/^void CommandLineArgs::setArgs(int argc, char** argv) {$/;"	f	class:el::base::utils::CommandLineArgs
setArgs	module/easylogging++.h	/^  inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
setArgs	module/easylogging++.h	/^  static inline void setArgs(int argc, char** argv) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
setArgs	module/easylogging++.h	/^  static inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
setContinueRunning	module/easylogging++.h	/^  void setContinueRunning(bool value) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncDispatchWorker
setCrashHandler	module/easylogging++.h	/^  static inline void setCrashHandler(const el::base::debug::CrashHandler::Handler& crashHandler) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
setDefaultConfigurations	module/easylogging++.cc	/^void Loggers::setDefaultConfigurations(const Configurations& configurations, bool reconfigureExistingLoggers) {$/;"	f	class:el::Loggers
setDefaultConfigurations	module/easylogging++.h	/^  inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
setDefaultLogBuilder	module/easylogging++.cc	/^void Loggers::setDefaultLogBuilder(el::LogBuilderPtr& logBuilderPtr) {$/;"	f	class:el::Loggers
setDefaultLogBuilder	module/easylogging++.h	/^  inline void setDefaultLogBuilder(LogBuilderPtr& logBuilderPtr) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
setDispatchAction	module/easylogging++.h	/^  inline void setDispatchAction(base::DispatchAction dispatchAction) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchData
setEnabled	module/easylogging++.h	/^  inline void setEnabled(bool enabled) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Callback
setFlags	module/easylogging++.h	/^  inline void setFlags(base::type::EnumType flags) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
setFromArgs	module/easylogging++.cc	/^void VRegistry::setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	class:el::base::VRegistry
setFromBase	module/easylogging++.cc	/^void Configurations::setFromBase(Configurations* base) {$/;"	f	class:el::Configurations
setGlobally	module/easylogging++.cc	/^void Configurations::setGlobally(ConfigurationType configurationType, const std::string& value,$/;"	f	class:el::Configurations
setGlobally	module/easylogging++.h	/^  inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
setHandler	module/easylogging++.cc	/^void CrashHandler::setHandler(const Handler& cHandler) {$/;"	f	class:el::base::debug::CrashHandler
setLevel	module/easylogging++.cc	/^void VRegistry::setLevel(base::type::VerboseLevel level) {$/;"	f	class:el::base::VRegistry
setLogBuilder	module/easylogging++.h	/^  inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
setLogMessage	module/easylogging++.h	/^  inline void setLogMessage(LogMessage* logMessage) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogDispatchData
setLoggingLevel	module/easylogging++.h	/^  inline void setLoggingLevel(Level level) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
setLoggingLevel	module/easylogging++.h	/^  static void setLoggingLevel(Level level) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
setModules	module/easylogging++.cc	/^void VRegistry::setModules(const char* modules) {$/;"	f	class:el::base::VRegistry
setParentApplicationName	module/easylogging++.h	/^  inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
setPreRollOutCallback	module/easylogging++.h	/^  inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
setRemainingToDefault	module/easylogging++.cc	/^void Configurations::setRemainingToDefault(void) {$/;"	f	class:el::Configurations
setStorage	module/easylogging++.h	/^  static inline void setStorage(base::type::StoragePointer storage) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
setThreadName	module/easylogging++.h	/^  inline void setThreadName(const std::string& name) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
setThreadName	module/easylogging++.h	/^  static inline void setThreadName(const std::string& name) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
setToDefault	module/easylogging++.cc	/^void Configurations::setToDefault(void) {$/;"	f	class:el::Configurations
setVModules	module/easylogging++.cc	/^void Loggers::setVModules(const char* modules) {$/;"	f	class:el::Loggers
setValue	module/easylogging++.h	/^  inline void setValue(const std::string& value) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
setValue	module/easylogging++.h	/^  void setValue(Level level, const Conf_T& value, std::unordered_map<Level, Conf_T>* confMap,$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
setVerboseLevel	module/easylogging++.cc	/^void Loggers::setVerboseLevel(base::type::VerboseLevel level) {$/;"	f	class:el::Loggers
size	module/easylogging++.cc	/^std::size_t CommandLineArgs::size(void) const {$/;"	f	class:el::base::utils::CommandLineArgs
start	module/easylogging++.cc	/^void AsyncDispatchWorker::start(void) {$/;"	f	class:el::base::AsyncDispatchWorker
startRoutine_epollTask	pthread_manager/epollin_task.cpp	/^void* startRoutine_epollTask(void* arg)$/;"	f
startTime	module/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::startTime() const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::PerformanceTrackingData
startsWith	module/easylogging++.cc	/^bool Str::startsWith(const std::string& str, const std::string& start) {$/;"	f	class:el::base::utils::Str
std	module/easylogging++.h	/^namespace std {$/;"	n	namespace:el
storage	module/easylogging++.h	/^  static inline base::type::StoragePointer storage() {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
stream	module/easylogging++.h	/^  inline base::type::stringstream_t& stream(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
stringToLevelMap	module/easylogging++.cc	/^static struct StringToLevelItem stringToLevelMap[] = {$/;"	m	namespace:el	typeref:struct:el::StringToLevelItem	file:
string_t	module/easylogging++.h	/^typedef std::wstring string_t;$/;"	t	namespace:el::base::type
stringstream_t	module/easylogging++.h	/^typedef std::wstringstream stringstream_t;$/;"	t	namespace:el::base::type
subsecondPrecision	module/easylogging++.cc	/^const base::SubsecondPrecision& TypedConfigurations::subsecondPrecision(Level level) {$/;"	f	class:el::base::TypedConfigurations
termSupportsColor	module/easylogging++.cc	/^bool OS::termSupportsColor(void) {$/;"	f	class:el::base::utils::OS
threadArg	pthread_manager/pthread_manager.h	/^class threadArg {$/;"	c
threading	module/easylogging++.cc	/^namespace threading {$/;"	n	namespace:el::base	file:
threading	module/easylogging++.h	/^namespace threading {$/;"	n	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
timevalToString	module/easylogging++.cc	/^std::string DateTime::timevalToString(struct timeval tval, const char* format,$/;"	f	class:el::base::utils::DateTime
toFile	module/easylogging++.cc	/^bool TypedConfigurations::toFile(Level level) {$/;"	f	class:el::base::TypedConfigurations
toStandardOutput	module/easylogging++.cc	/^bool TypedConfigurations::toStandardOutput(Level level) {$/;"	f	class:el::base::TypedConfigurations
toUpper	module/easylogging++.cc	/^std::string& Str::toUpper(std::string& str) {$/;"	f	class:el::base::utils::Str
triggerDispatch	module/easylogging++.cc	/^void Writer::triggerDispatch(void) {$/;"	f	class:el::base::Writer
trim	module/easylogging++.cc	/^std::string& Str::trim(std::string& str) {$/;"	f	class:el::base::utils::Str
try_lock	module/easylogging++.h	/^  inline bool try_lock(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::Mutex
type	module/easylogging++.h	/^namespace type {$/;"	n	namespace:el::base
typedConfigurations	module/easylogging++.h	/^  inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
uninstallCallback	module/easylogging++.h	/^  static void uninstallCallback(const std::string& id, std::unordered_map<std::string, TPtr>* mapT) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Utils
uninstallCustomFormatSpecifier	module/easylogging++.cc	/^bool Storage::uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::base::Storage
uninstallCustomFormatSpecifier	module/easylogging++.h	/^  static inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
uninstallLogDispatchCallback	module/easylogging++.h	/^  inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
uninstallLogDispatchCallback	module/easylogging++.h	/^  static inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
uninstallLoggerRegistrationCallback	module/easylogging++.h	/^  inline void uninstallLoggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
uninstallLoggerRegistrationCallback	module/easylogging++.h	/^  static inline void uninstallLoggerRegistrationCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers
uninstallPerformanceTrackingCallback	module/easylogging++.h	/^  inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
uninstallPerformanceTrackingCallback	module/easylogging++.h	/^  static inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
uninstallPreRollOutCallback	module/easylogging++.h	/^  static inline void uninstallPreRollOutCallback(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
unit	module/easylogging++.h	/^  const base::type::char_t* unit;$/;"	m	struct:el::el::ConfigurationType::base::consts::__anon1
unlock	module/easylogging++.h	/^  inline void unlock(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::Mutex
unregister	module/easylogging++.h	/^  inline void unregister(Logger*& logger) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
unregister	module/easylogging++.h	/^  void unregister(const T_Key& uniqKey) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
unregisterLogger	module/easylogging++.cc	/^bool Loggers::unregisterLogger(const std::string& identity) {$/;"	f	class:el::Loggers
unsafeFlushAll	module/easylogging++.cc	/^void RegisteredLoggers::unsafeFlushAll(void) {$/;"	f	class:el::base::RegisteredLoggers
unsafeGetConfigByRef	module/easylogging++.h	/^  Conf_T& unsafeGetConfigByRef(Level level, std::unordered_map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
unsafeGetConfigByVal	module/easylogging++.h	/^  Conf_T unsafeGetConfigByVal(Level level, const std::unordered_map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
unsafeSet	module/easylogging++.cc	/^void Configurations::unsafeSet(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Configurations
unsafeSetGlobally	module/easylogging++.cc	/^void Configurations::unsafeSetGlobally(ConfigurationType configurationType, const std::string& value,$/;"	f	class:el::Configurations
unsafeSetIfNotExist	module/easylogging++.cc	/^void Configurations::unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Configurations
unsafeValidateFileRolling	module/easylogging++.cc	/^bool TypedConfigurations::unsafeValidateFileRolling(Level level, const PreRollOutCallback& preRollOutCallback) {$/;"	f	class:el::base::TypedConfigurations
unsetPreRollOutCallback	module/easylogging++.h	/^  inline void unsetPreRollOutCallback(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
updateDateFormat	module/easylogging++.cc	/^void LogFormat::updateDateFormat(std::size_t index, base::type::string_t& currFormat) {$/;"	f	class:el::base::LogFormat
updateFormatSpec	module/easylogging++.cc	/^void LogFormat::updateFormatSpec(void) {$/;"	f	class:el::base::LogFormat
userFormat	module/easylogging++.h	/^  inline const base::type::string_t& userFormat(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
utils	module/easylogging++.cc	/^namespace utils {$/;"	n	namespace:el::base	file:
utils	module/easylogging++.h	/^namespace utils {$/;"	n	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags
vModulesEnabled	module/easylogging++.h	/^  inline bool vModulesEnabled(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::VRegistry
vRegistry	module/easylogging++.h	/^  inline base::VRegistry* vRegistry(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
validateAfterN	module/easylogging++.cc	/^bool RegisteredHitCounters::validateAfterN(const char* filename, base::type::LineNumber lineNumber, std::size_t n) {$/;"	f	class:el::base::RegisteredHitCounters
validateAfterNCounter	module/easylogging++.h	/^  inline bool validateAfterNCounter(const char* filename, base::type::LineNumber lineNumber, std::size_t n) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
validateEveryN	module/easylogging++.cc	/^bool RegisteredHitCounters::validateEveryN(const char* filename, base::type::LineNumber lineNumber, std::size_t n) {$/;"	f	class:el::base::RegisteredHitCounters
validateEveryNCounter	module/easylogging++.h	/^  inline bool validateEveryNCounter(const char* filename, base::type::LineNumber lineNumber, std::size_t occasion) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
validateFileRolling	module/easylogging++.h	/^  inline bool validateFileRolling(Level level, const PreRollOutCallback& preRollOutCallback) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
validateFileRolling	module/easylogging++.h	/^  static inline void validateFileRolling(Logger* logger, Level level) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Helpers
validateHitCounts	module/easylogging++.h	/^  inline void validateHitCounts(std::size_t n) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
validateNTimes	module/easylogging++.cc	/^bool RegisteredHitCounters::validateNTimes(const char* filename, base::type::LineNumber lineNumber, std::size_t n) {$/;"	f	class:el::base::RegisteredHitCounters
validateNTimesCounter	module/easylogging++.h	/^  inline bool validateNTimesCounter(const char* filename, base::type::LineNumber lineNumber, std::size_t n) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Storage
value	module/easylogging++.h	/^  double value;$/;"	m	struct:el::el::ConfigurationType::base::consts::__anon1
value	module/easylogging++.h	/^  inline const std::string& value(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
verbose	module/easylogging++.h	/^inline void Logger::verbose(int vlevel, const T& log) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
verbose	module/easylogging++.h	/^inline void Logger::verbose(int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
verbose	module/easylogging++.h	/^inline void Logger::verbose(int, const T&) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
verbose	module/easylogging++.h	/^inline void Logger::verbose(int, const char*, const T&, const Args&...) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Logger
verboseLevel	module/easylogging++.cc	/^base::type::VerboseLevel Loggers::verboseLevel(void) {$/;"	f	class:el::Loggers
verboseLevel	module/easylogging++.h	/^  inline base::type::VerboseLevel verboseLevel(void) const {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogMessage
version	module/easylogging++.cc	/^const std::string VersionInfo::version(void) {$/;"	f	class:el::VersionInfo
wcharPtrToCharPtr	module/easylogging++.cc	/^char* Str::wcharPtrToCharPtr(const wchar_t* line) {$/;"	f	class:el::base::utils::Str
wildCardMatch	module/easylogging++.cc	/^bool Str::wildCardMatch(const char* str, const char* pattern) {$/;"	f	class:el::base::utils::Str
workarounds	module/easylogging++.h	/^namespace workarounds {$/;"	n	namespace:el::el::ConfigurationType::base::TimestampUnit::base::base
writeIterator	module/easylogging++.h	/^  MessageBuilder& writeIterator(Iterator begin_, Iterator end_, std::size_t size_) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::MessageBuilder
~AbstractRegistry	module/easylogging++.h	/^  virtual ~AbstractRegistry(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::AbstractRegistry
~AsyncDispatchWorker	module/easylogging++.cc	/^AsyncDispatchWorker::~AsyncDispatchWorker() {$/;"	f	class:el::base::AsyncDispatchWorker
~AsyncLogItem	module/easylogging++.h	/^  virtual ~AsyncLogItem() {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogItem
~AsyncLogQueue	module/easylogging++.h	/^  virtual ~AsyncLogQueue() {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::AsyncLogQueue
~CommandLineArgs	module/easylogging++.h	/^  virtual ~CommandLineArgs(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::CommandLineArgs
~Configuration	module/easylogging++.h	/^  virtual ~Configuration(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configuration
~Configurations	module/easylogging++.h	/^  virtual ~Configurations(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Configurations
~HitCounter	module/easylogging++.h	/^  virtual ~HitCounter(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::HitCounter
~IWorker	module/easylogging++.h	/^  virtual ~IWorker() {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::IWorker
~IterableContainer	module/easylogging++.h	/^  virtual ~IterableContainer(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::workarounds::IterableContainer
~LogBuilder	module/easylogging++.h	/^  virtual ~LogBuilder(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogBuilder
~LogFormat	module/easylogging++.h	/^  virtual ~LogFormat(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::LogFormat
~Loggable	module/easylogging++.h	/^  virtual ~Loggable(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::Loggable
~Logger	module/easylogging++.h	/^  virtual ~Logger(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::Logger
~Mutex	module/easylogging++.h	/^  virtual ~Mutex(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::Mutex
~PErrorWriter	module/easylogging++.cc	/^PErrorWriter::~PErrorWriter(void) {$/;"	f	class:el::base::PErrorWriter
~PerformanceTracker	module/easylogging++.cc	/^PerformanceTracker::~PerformanceTracker(void) {$/;"	f	class:el::base::PerformanceTracker
~RegisteredLoggers	module/easylogging++.h	/^  virtual ~RegisteredLoggers(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::RegisteredLoggers
~Registry	module/easylogging++.h	/^  virtual ~Registry(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::Registry
~RegistryWithPred	module/easylogging++.h	/^  virtual ~RegistryWithPred(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::utils::RegistryWithPred
~ScopedAddFlag	module/easylogging++.h	/^    ~ScopedAddFlag(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers::ScopedAddFlag
~ScopedLock	module/easylogging++.h	/^  virtual ~ScopedLock(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
~ScopedRemoveFlag	module/easylogging++.h	/^    ~ScopedRemoveFlag(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::Loggers::ScopedRemoveFlag
~StackTrace	module/easylogging++.h	/^  virtual ~StackTrace(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::base::debug::StackTrace
~Storage	module/easylogging++.cc	/^Storage::~Storage(void) {$/;"	f	class:el::base::Storage
~SysLogInitializer	module/easylogging++.h	/^  virtual ~SysLogInitializer(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::PerformanceTrackingData::SysLogInitializer
~ThreadSafe	module/easylogging++.h	/^  virtual ~ThreadSafe(void) {}$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::FormatFlags::threading::ThreadSafe
~TypedConfigurations	module/easylogging++.h	/^  virtual ~TypedConfigurations(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::TypedConfigurations
~Writer	module/easylogging++.h	/^  virtual ~Writer(void) {$/;"	f	class:el::el::ConfigurationType::base::TimestampUnit::base::base::Writer
